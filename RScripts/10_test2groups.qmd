# Simple test statistics

## Tests require hypotheses

![](../Graphs/guestimate.jpg){fig-align="center"}

### Null hypothesis ?

-   Working hypothesis: This is what you expect!\
    E.g. treatment is lowering blood pressure more than placebo, transgenic animals become obese, bio reactor A is more efficient than B, concentration of substance is correlated with speed of reaction ...

-   Null hypothesis: This is what you test!\
    No difference / relation, BP under therapy = BP under placebo

**4 possibilities:**

-   Null hypothesis correct, test false positive (case A): alpha-error

-   Null hypothesis correct, test correct negative (case B)

-   Null hypothesis false, test false negative (case C): beta-error

-   Null hypothesis false, test correct positive (case D)

**Significance**: NOT probability of case A, but probability of your data given the NULL hypothesis, calculated from your data, conventionally \<0.05

**Power**: Probability of case D, *estimated* based on assumptions about effects and sample size, *calculation* would require knowledge of true difference, conventionally set at 0.80; this translates into a ***20% risk of false negative results***!

```{r}
pacman::p_load(conflicted,plotrix,tidyverse, wrappedtools,
               coin,ggsignif, patchwork, ggbeeswarm,
               flextable, here)
#conflicted)
# conflict_prefer("filter", "dplyr")
load(here("data/bookdata1.RData"))

```

## Quantitative measures with Gaussian distribution

**t-test**

-   Assumptions: Continuous data with Normal distribution

-   1 or 2 (independent or dependent) samples with/without equal variances

-   how big is the mean difference relative to uncertainty?\
    t = (mean~1~ - mean~2~)/SEM

-   t follows a t-distribution, allows estimation of probability of t under the NULL hypothesis

```{r}
ggplot(rawdata,aes(x=Sex,y=`Size (cm)`))+
  geom_beeswarm(size=3)+
  stat_summary(color="red",size=1.2,alpha=.7, 
               fun.data="mean_se",fun.args=list(mult=2))+
  ylab("size (mean \u00B1 2*SEM)")

rawdata |> 
  group_by(Sex) |> 
summarize(MeanSE=meanse(`Size (cm)`),
          SD=sd(`Size (cm)`))

t.test(x = rawdata$`Size (cm)`[which(rawdata$Sex=="f")],
       y = rawdata$`Size (cm)`[which(rawdata$Sex=="m")])
tOut<-t.test(rawdata$`Size (cm)`~rawdata$Sex)
tOut$p.value

# equal variances assumption?
vartestOut<-var.test(rawdata$`Size (cm)`~rawdata$Sex)
vartestOut
# car::leveneTest(rawdata$`Size (cm)`~rawdata$Sex)
# manual entry
t.test(rawdata$`Size (cm)`~rawdata$Sex,
              var.equal = vartestOut$p.value>.05)
# picked from test
t.test(rawdata$`Size (cm)`~rawdata$Sex,
       var.equal=var.test(
         rawdata$`Size (cm)`~rawdata$Sex)$p.value>.05)
#combined function
t_var_test(data = rawdata,
           formula = "`Size (cm)`~Sex",
           cutoff = .1)


print(c(mean(rawdata$`sysBP V0`,na.rm=T),
        mean(rawdata$`sysBP V2`,na.rm=T)))

t.test(rawdata$`sysBP V0`,
       rawdata$`sysBP V2`,
       alternative="greater", # x>y
       paired=TRUE)  #pairwise t-test, within subject
t.test(rawdata$`sysBP V0`,
       rawdata$`sysBP V2`,
       # alternative="greater", # x>y
       paired=T)$p.value/2  #pairwise t-test, within subject

t.test(rawdata$`Size (cm)`,mu = 173)

groupvars <- ColSeeker(namepattern = c("Sex","Test"))

compare2numvars(data = rawdata,dep_vars = gaussvars$names,
                indep_var = "Sex",gaussian = T,
                round_desc = 3,n = T, mark=T) |> 
  flextable() |> 
  set_table_properties(width=1, layout="autofit")
compare2numvars(data = rawdata,dep_vars = gaussvars$names,
                indep_var = "Testmedication",gaussian = T,
                round_desc = 4) |> 
  flextable() |> 
  set_table_properties(width=1, layout="autofit")


```

```{r}
#| output: asis
for(group_i in seq_len(groupvars$count)){
  resulttmp <- 
    compare2numvars(data = rawdata,
                    dep_vars = gaussvars$names,
                    indep_var = groupvars$names[group_i],gaussian = T)
  # print(resulttmp)
  flextable(resulttmp)  |> 
  set_table_properties(width=1, layout="autofit") |>
  flex2rmd() #|> print()
  
  cat("\\newpage\n\n")
}
```

## Ordinal data

**Wilcoxon-test / Mann-Whitney U test**

-   nonparametric, no distribution is assumed

-   based on rank-transformed data

-   insensitive to extreme values

```{r}
ordvars$names
ggplot(rawdata,aes(`Ptt Lab`,fill=Sex))+
  geom_density(alpha=.3)
by(data = rawdata[[ordvars$index[1]]], 
   INDICES = rawdata$Sex,FUN = median_quart)

ggplot(rawdata,aes(Sex,`Ptt Lab`))+
  geom_boxplot()+
  geom_beeswarm(alpha=.5)
(uOut<-wilcox.test(
  rawdata[[ordvars$names[1]]]~rawdata$Sex,exact=F))
uOut$p.value
#  coin::wilcox_test
(uOut2<-wilcox_test(`Ptt Lab`~Sex,
                    data=rawdata))
pvalue(uOut2) #no list-object, but methods to extract infos like p
wilcox.test(`Ptt Lab`~Sex,exact=F,correct=F,
            data=rawdata)
wilcox.test(x=rawdata$`sysBP V0`,y=rawdata$`sysBP V2`,
            exact=FALSE,
            correct=TRUE,paired=TRUE)

compare2numvars(data = rawdata,dep_vars = ordvars$names,n = F,
                range = T,add_n = T,
                indep_var = "Sex",gaussian = F) |> 
  flextable() |> 
  set_table_properties(width=1, layout="autofit")
```

## Categorial data

```{r}
factvars$names
(crosstab<-table(rawdata$Sex,rawdata$Testmedication))
chisq.test(crosstab,simulate.p.value=T,B=10^5)  #empirical p-value

chisq.test(table(rawdata$Sex,rawdata$`NYHA V1`))  #based on table
chisq.test(x=rawdata$Sex,y=rawdata$`NYHA V1`,
           simulate.p.value=T,B=10^5)  #based on rawdata
fisher_out <- fisher.test(
  table(rawdata$Sex,rawdata$`NYHA V1`))  
fisher_out$p.value

(crosstab1<-table(rawdata$Sex,
                  rawdata$`Weight (kg)`<=
                    median(rawdata$`Weight (kg)`)))

(tabletestOut<-chisq.test(crosstab1,simulate.p.value=T,
                          B=10^5))
tabletestOut$p.value
tabletestOut$expected
tabletestOut$observed
tabletestOut$statistic
# if minimum(expected<5) then Fishers exact test
if(min(tabletestOut$expected)<5) {
  tabletestOut<-fisher.test(crosstab1)
}
tabletestOut$p.value 
# report_cat
groupvar <- "Testmedication"

rawdata |> 
  mutate(Testmedication=factor(Testmedication,
                               levels=0:1,
                               labels=c("Placebo","Verum"))) |> 
  compare2qualvars(,dep_vars = factvars$names[-1],
                 indep_var = groupvar,spacer = " ") |> 
  rename_with(~str_remove(.x, "Testmedication")) |> 
  rename(`Total sample`=desc_all) |> 
  flextable() |> 
  align(~p==" ",j = 1,align = "center") |> 
  bg(~p!=" ",bg = "lightgrey")
```

# Exercise

Compare the 4 measurements in the penguin data between the sex as well as between 2 species (e.g Adelie vs. Gentoo). Treat the measures first as gaussian, then as ordinal.

Use the basic functions first for at least one phenotype before trying out compare2numvars().

Look at the categorical data year, island, species and sex and run some tests on their independence.
