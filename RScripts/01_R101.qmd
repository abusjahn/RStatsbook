# *Syntax rules / basic things to know about R*

*This is going to be the boring technical stuff... We'll get to the more interesting topics in the next chapters.*

## *Script preparation / basic setup*

*At the beginning of (almost) every script we define packages to be used. This could be done by either*

-   *checking if packages needed are installed and otherwise do so, followed by function `library(packagename)`*

*OR*

-   *simplifying this using function p_load() from package pacman; if you want to create fool-proof scripts, check for pacman and install if needed.*

```{r}
# â†‘ this is the head of a code chunk
Sys.setenv(LANG="en_EN.UTF-8") # to get errors/warnings in English
if(!requireNamespace("pacman",quietly = TRUE)){
  install.packages("pacman")
}
pacman::p_load(
  conflicted, # tests/solutions for name conflicts
  tidyverse, # metapackage 
  wrappedtools, # my own tools package
  randomNames # used to create pseudo names
  )
conflict_scout()
conflicts_prefer(dplyr::filter,
                 stats::lag)

```

## *Numeric operations*

```{r}
### simple calculations ####
2+5
3*5
15/3 #not 15:3!!, would create vector 15,14,13 ... 3
3^2
9^0.5
10%%3 #modulo
```

## *Variables*

### *Variable names*

*Naming things is harder than you may expect. Try to be verbose and consistent in language and style. Commonly used are snake_case_style and CamelCaseStyle.*

*Decide about computer-friendly (syntactical) or human-friendly names, illegal names can be used inside backticks: \`measure \[unit\]\`. My preference is syntactical for script variables and humane for data variables, e.g. column names, print labels etc.*

*There are rules for valid syntactical names:*

-   *UPPERCASE and lowercase are distinguished*

-   *start with letter or symbols as **.\_** , but not with a number*

-   *no mathematical symbols or brackets allowed*

*To store some value into a variable, use the assignment operator **\<-** ; while it possible to use **=** or **-\>** , this is rather unusual. Assignments are silent, so either a call of the variable, or `print()` / `cat()` function are needed to inspect. Alternatively, put brackets around assignment: (varname \<- content).*

```{r}
### Variable names ####
test <- 1
test1 <- 1
# 1test <- 2 # wrong, would result in error
`1test` <- 2 # this would be possible
test_1 <- 5
test.1 <- 2
`test-1` <- 6
`test(1)` <- 5
Test <- "bla"
HereAreFilteredData <- "" #CamelCase
here_are_filtered_data <- "test" #snake_case
`Weight [kg]` <- 67 
```

### *Basic classes of data*

*R is 'guessing' the suitable type of data from input. This should be checked after e.g. importing data! If elements of different classes are found, the more inclusive is used. There are functions to change / force a type if needed.*

*The **`class()`** function returns the class of an object, which determines how it behaves with respect to functions like **`print()`**. The class of an object can be changed by using generic functions and methods.*

*The **`typeof()`** function returns the basic data type of an object, which determines how it is stored in memory. The basic data type of an object cannot be changed.*

*The **`str()`** function shows class and examples of an object.*

#### *Guessed classes*

```{r}
float_num <- 123.456
class(float_num)
typeof(float_num)
str(float_num)
int_num <- 123L # L specifies integer, guessing requires more values
class(int_num)
typeof(int_num)
str(int_num)
integer(length = 3)
result<-9^(1/2)
result
print(result)
cat(result)

char_var <- "some words"
class(char_var)
typeof(char_var)
character(length = 5)
logical_var <- TRUE # can be abbreviated to T 
logical_var2 <- FALSE # or F, seen as bad style
class(logical_var)
typeof(logical_var)
logical(length = 3)
# logicals usualy are defined by conditions:
int_num < float_num
# all numbers are true but 0
as.logical(c(0,1,5,-7.45678)) # c() combines values into a vector
```

*Factor: categorical variables with limited set of distinct values, internally stored as integers. Everything intended to group subjects or representing categories should be stored as factor.\
Package forcats provides nice tools for factors!*

```{r}
factor_var <- factor(c("m","m","f","m","f","f","?"))
factor_var
class(factor_var)
typeof(factor_var) # that is why factors can be called enumerated type
levels(factor_var)
# factor definition can reorder, rename, and drop levels:
factor_var2 <- factor(c("m","m","f","m","f","f","?"),
                     levels = c("m","f"),
                     labels = c("male","female"))
factor_var2
```

*Dates / Time:*

```{r}
(date_var <- Sys.Date())
class(date_var)
typeof(date_var)
class(Sys.time())
```

*Mixed classes:*

```{r}
test2 <- c(1,2,"a","b")
class(test2)
test2
```

#### *Forcing / casting classes*

*Casting functions usually start with `as.` , when creating variables filled with NA, use casting functions or specific variants of NA to force type!*

```{r}
(test <- c(1,2,3,"a","b","c")) 
(test_n <- as.numeric(test))
as.numeric(factor_var)
as.character(10:19)

# NAs
(test_NA1 <- rep(NA,10))
class((test_NA1))
class(NA_real_)
(test_NA2 <- rep(NA_real_,10))
class((test_NA2))
class(NA_integer_)
class(NA_character_)
class(NA_Date_) # from package lubridate
```

### *Indexing variables*

*The most general kind of indexing is by position, starting with **1**. Negative numbers result in exclusion of position(s). Position indices are provided within square brackets. The index can (and usually will) be a variable instead of hard coded numbers.*

```{r}
(numbers1 <- c(5,3,6,8,2,1))
numbers1[1]
numbers1[1:3]
numbers1[-c(1,3)]
numbers2 <- 1:3
numbers1[numbers2]
# numbers1[1,2] #Error: incorrect number of dimensions
```

*To get first or last entries, head() and tail() can be used. By default 6 entries are returned.*

```{r}
tail(x = numbers1, n = 1)
head(x = numbers1, n = 3)
nth(x = numbers1,n=-2) # 2nd to last
```

### *Usage of variables*

*Variables are like placeholders for their content, so that you don't have to remember where you left things. Operations on variables are operations on their content. Changing the content of a variable does not automatically save those changes back to the variable, this needs to be done explicitly!*

```{r}
numbers1 + 100 # not stored anywhere, just printed
numbers1 + numbers2 # why does this even work?
```

*When combining variables of different length, the short one is recycled, so the numbers2 is added to the first 3 elements of numbers2, then is reused and added to the remaining 3 elements. If the length of the longer is not a multiple of the shorter, there will be a warning.*

```{r}
c(2,4,6,8) + 1 
c(2,4,6,8) + c(1,2)
c(2,4,6,8) + c(1,2,3)
```

## *Functions*

### *Function usage*

*Functions have the same naming rules as variables, but the name is always followed by opening/closing round brackets, within those brackets function parameters/arguments can be specified to provide input or control behavior:*

*FunctionName(parameter1=x1,parameter2=x2,x3,...)*

*Most functions have named arguments, those argument names may be omitted as long as parameter values are supplied in the defined order. Arguments may have predefined default values, see help! Some functions like `c()` use unnamed arguments.*

```{r}
c("my", "name") # unnamed
# ?mean
mean(x = c(3,5,7,NA)) #using default parameters
mean(x = c(3,5,7,NA),na.rm = TRUE) #overriding default parameter
mean(na.rm = TRUE, x=c(3,5,7,NA)) # changed order of arguments
mean(c(3,5,7,NA), na.rm = TRUE) # name of 1st argument omitted
sd(c(3,5,7,NA), na.rm = TRUE) 
# same logic as mean, partially the same arguments
median(1:100, TRUE) 
# omitting arguments influences readability of a function, careful!
t <- c(1:10,100)
quantile(x = t,probs = c(.2,.8))
# putting text elements together
paste("some text", 1:3)
paste0("some text", 1:3)
paste("some text", 1:3, sep = ": ")
paste("some text", 1:3,sep = ": ", collapse = "; ")
paste("some text", 1:3,sep = ": ", collapse = "\n") |> cat()
paste("mean", "SD", sep = " \u00b1 ")
```

### *Functions combined*

*Functions often just solve one problem or task, so usually we need to combine them. This can be done by nesting or piping. Piping makes reading/understanding scripts easier, as it shows order of functions:*

![*Piping functions*](../Graphs/piping_complete.jpg){fig-pos="h"}

```{r}
# functions may be nested:
floor(
  as.numeric(
    Sys.Date() -
      as.Date("1985/12/10"))/
    365.25)
# or (usually better) piped:
mtcars |>   # inbuild example data, use F1!
  mutate(am=factor(am,
                   levels=c(0,1),
                   labels=c("automatic",
                            "manual")))  |> # #change into better class
  filter(vs==1) |> #filter out V-shaped
  group_by(am) |> # ask for grouped analysis
  summarize(across(.cols = c(wt, mpg, qsec, disp),
                   .fns = meansd))  |>
  pivot_longer(cols = -am, names_to = "Measure")  |> # put variables in rows
  pivot_wider(id_cols = Measure, names_from = am, #put groups in cols
              values_from = value)
```

*If a sequence of functions is used often, combining them into a new function is advisable, e.g. this combination of descriptive and test statistics:*

```{r}
# can be combined into higher order functions:
compare2numvars(data = mtcars,
                dep_vars = c("mpg", "wt", "qsec"),
                indep_var = "am",
                add_n = TRUE,
                gaussian = TRUE)
```

### *Writing functions*

```{r}
#FunctionName<-function(parameters...){definition}
division <- function(y, x){
  return(x/y)
}
(Sys.Date()-as.Date("1958/12/10")) |> 
  as.numeric() |> 
  division(y = 365.25, x=_) |> 
  floor()

mean<-function(values)
{
  return(base::mean(values, na.rm=TRUE))
}


mark_sign<-function(SignIn) {
  SignIn <- as.numeric(SignIn)
  if(is.na(SignIn)){
    SignOut<-"wrong input, stupido!"
  } else {
    # if (!is.na(SignIn)) {
    SignOut<-"n.s."
    if(SignIn<=0.1) {SignOut<-"+"}
    if(SignIn<=0.05) {SignOut<-"*"}
    if(SignIn<=0.01) {SignOut<-"**"}
    if(SignIn<=0.001) {SignOut<-"***"}
  }
  return(SignOut)
}

mark_sign(SignIn=0.035)
mark_sign(SignIn="0.35")
mark_sign(SignIn = "p=3,5%")   #wrong input
```

*different implementation*

```{r}
markSign0 <- function(SignIn, plabel = c("n.s.", "+", "*", "**", "***")) {
  SignIn <- suppressWarnings(
    as.numeric(SignIn))
  SignOut <- cut(SignIn,
                 breaks = c(-Inf, .001, .01, .05, .1, 1),
                 labels = rev(plabel)
  )
  return(SignOut)
}

markSign0(SignIn=c(0.035, 0.00002,.234))
markSign0(SignIn="0.35")
markSign0(SignIn = "p=3,5%")   #wrong input



#source("F:/Aktenschrank/Analysen/R/myfunctions.R")
```

## *More complex data types, created by functions*

### *Matrix*

*A matrix is a 2-dimensional data structure, where all elements are of the same class.*

#### *Creation*

```{r}
my1.Matrix<-
  matrix(data=1:12,
         # nrow=4, # this is not needed, can be derived from data
         ncol=3,
         byrow=TRUE, # date are put into row 1 first
         dimnames=list(paste0("row", 1:4),
                       paste0("col", 1:3)))
print(my1.Matrix)
data <- seq(from = 1, to = 100, by = 1) #1:100
nrow <- 20
matrix(data=data,
       nrow=nrow,
       byrow=FALSE, # data are put into column 1 first
       dimnames=list(paste0("row",1:nrow),
                     paste0("col",1:(length(data)/nrow)))) |> 
  head()
my2.Matrix <- matrix(c(1,2,3, 11,12,13),
               nrow = 2, ncol=3) #byrow=FALSE, specified but default
my2.Matrix
```

#### *Indexing*

*Addressing a matrix is done with \[row_index, column_index\]*

```{r}
my1.Matrix[2, 3] # Index:[row,column]
my1.Matrix[2,] # all columns
my1.Matrix[, 2] # all rows
my1.Matrix[c(1, 3),-2] # exclude column 2
my1.Matrix[1,1]<-NA # Index can be used for writing as well
```

### *Data frame*

*A data frame has 2 dimensions, it can handle various data types (1 per columns). This structure is rather superseded by tibbles (see below).*

#### *Creation*

*Data frames are defined by creating and filling columns, functions can be used (and piped) to create content.*

```{r}
patientN<-15
(myTable<-data.frame(
  patientCode=paste0("pat",1:patientN),
  Var1 = 1, # gets recycled
  Var2 = NA_Date_)) |> head() 
str(myTable)
set.seed(101)
myTable<-data.frame(
  patientCode=paste0("pat",1:patientN),
  Age=runif(n=patientN,min=18,max=65)  |>  floor(),
  Sex=factor(rep(x=NA,times=patientN),
             levels=c("m","f")),
  `sysRR (mmHg)`=round(rnorm(n=patientN,mean=140,sd=10)),
  check.names = FALSE)
head(myTable)
```

#### *Indexing*

*Beside the numeric index, columns can be addressed by name. This can be done by either dfname\$colname (for the content of a single column) or dfname\[,"colname"\] for 1 or more columns.*

```{r}
myTable[1:5,1]
myTable$patientCode[1:5]
myTable[1:5,"patientCode"] 
# returns vector of values for a single column, data.frame otherwise
myTable["patientCode"] # returns df
columns<-c("Sex", "Age")
myTable[1:5, columns]
myTable[1:5, c("patientCode", "Age")]
myTable[,1]<-paste0("Code", 1:patientN) 
```

### *Tibble*

*Tibbles are a modern and efficient data structure that extends data frames, providing enhanced features and performance for data manipulation and analysis.*

#### *Creation*

```{r}
patientN <- 25
set.seed(3105)
rawdata <- tibble(
  PatID=paste("P",1:patientN), # as in  data.frame
  Sex=sample(x = c("male","female"),  # random generator
             size = patientN,replace = TRUE,
             prob = c(.7,.3)),
  Ethnicity=sample(x = 1:6,
                   size = patientN,
                   replace = TRUE,
                   prob = c(.01,.01,.05,.03,.75,.15)), 
  # random assignments
  `Given name`=randomNames(n = patientN,
                           gender = Sex, 
                           # this is a reference to column Sex
                           ethnicity = Ethnicity,
                           which.names = "first"),
  `Family name`=randomNames(n = patientN,
                            ethnicity = Ethnicity,
                            which.names = "last"),
  Treatment=sample(x = c("Placebo","Verum"),
                   size = patientN,
                   replace = TRUE),
  `sysRR (mmHg)`=round(rnorm(n=patientN,mean=140,sd=10))-
    (Treatment=="Verum")*15,
  `diaRR (mmHg)`=round(rnorm(n=patientN,mean=80,sd=10))-
    (Treatment=="Verum")*10,
  HR=round(rnorm(n=patientN,mean=90,sd=7)))
rawdata
colnames(rawdata)
cn() # shortcut from wrappedtools
# example of data management for a tibble, recoding ethnicity:
rawdata <- rawdata  |>
  mutate(Ethnicity=factor(
    Ethnicity,levels = 1:6,
    labels=	c(
      "American Indian or Native Alaskan",
      "Asian or Pacific Islander",
      "Black (not Hispanic)",
      "Hispanic",
      "White (not Hispanic)",
      "Middle-Eastern, Arabic")))
# quick visual inspection
ggplot(rawdata,aes(x = Treatment,y = `sysRR (mmHg)`))+
  geom_boxplot()
```

#### *Indexing*

*The same rules as for the data frame, but more consistent behavior.*

```{r}
rawdata[1:5,1:2]
rawdata[,6]
rawdata[6]
rawdata[[6]]
rawdata$`Family name`
```

*Differences in addressing data frames and tibbles:*

-   *tibble and `[` always returns tibble*

-   *tibble and `[[` always returns vector*

-   *data.frame and `[` may return data.frame (if \>1 column) or vector*

-   *data.frame and `[[` always returns vector*

```{r}
rawdata_df <- as.data.frame(rawdata)
rawdata[2] #returns Tibble with 1 column
rawdata[[2]] #returns vector
rawdata[,2] #returns Tibble with 1 column
rawdata[,2:3] #returns tibble with 2 columns
rawdata_df[2] #returns DF with 1 column
rawdata_df[[2]] #returns vector
rawdata_df[,2] #returns vector
rawdata_df[,2:3] #returns DF with 2 columns
```

*There are specific functions for picking columns or rows, especially useful in pipes.*

```{r}
rawdata |> select(PatID:Ethnicity,`sysRR (mmHg)`:HR)
rawdata |> select(PatID:Ethnicity,`sysRR (mmHg)`:HR) |> slice(1:5)
rawdata |> select(contains("RR",ignore.case = F))
rawdata |> select(ends_with("r"))
rawdata |> select(-contains("name"))
rawdata |> select(where(is.numeric))
rawdata |> select(`sysRR (mmHg)`)
rawdata |> select(contains("r"),-contains("rr"))
rawdata |> pull(`sysRR (mmHg)`)

```

*Exercise: Think of a cruet_stand / GewÃ¼rzmenage*

-   *define n_elements \<- 5\*10\^3*

-   *create a tibble "menage" with columns saltshaker, peppercaster and n_elements each for saltgrain and pepperflake*

-   *print saltshaker*

-   *print salt*

-   *print 100 saltgrains*

![](../Graphs/menage.jpg)

### *List*

*While matrix, data.frames, and tibbles always have the same number of rows for each column, sometimes different lengths are required. A list can handle all kinds of data with different number of elements for each sublist. This is a typical output format for statistical functions and is useful for collecting e.g. result tables or figures. Package rlist provides useful tools.*

#### *Creation*

```{r}
shopping<-list(beverages=c("beer","water",
                           "gin(not Gordons!!)","tonic"),
               snacks=c("chips","pretzels"),
               nonfood=c("DVDs","Akku"),
               mengen=1:10,
               volumen=rnorm(50,100,2))
shopping

```

#### *Indexing*

```{r}
shopping$snacks
shopping[1]    #returns a list
shopping[[1]]  #returns a vector
str(shopping[1])
str(shopping[[1]])
str(shopping$beverages)
shopping[1][2]
shopping[[1]][2]
shopping$beverages[2]
t_out <- t.test(x = rnorm(n = 20,mean = 10,sd = 1),
                y = rnorm(20,12,1))
str(t_out)
t_out$p.value
t_out |> pluck("p.value")
```

## *Control structures*

### *Loops*

*Repetitive tasks like computation of descriptive statistics over many variables or repeated simulations of data can be declared inside of a loop. There are functions (like summarize(across(...))) that create those repetitions internally, but often doing this explicitly improves readability or helps solving various tasks like describing AND plotting data.*

#### *for-loop*

*In a for-loop, we can define the number of runs in advance, e.g. by the number of variables to describe. There are 2 ways/styles, how to define this number:*

1.  *by creating an index variable with an integer vector 1,2,3, ... number of runs/variables*

2.  *by creating an index containing e.g. colnames*

```{r}
# integer index
print("### Game of Loops ###")
for(season_i in 1:3) {
cat(paste("GoL Season",season_i,"\n"))
  for(episode_i in 1:5) {
    cat(paste0("   GoL S.",season_i,
               " Episode ",episode_i,"\n"))
  }
  cat("\n")
}
# content index
## names of elements
for(col_i in colnames(rawdata)){
  print(col_i)
}
## content of elements
for(col_i in shopping){
  print(col_i)
}
# automatic creation of integer index from elements
#for(col_i in 1:ncol(rawdata))){
for(col_i in seq_along(colnames(rawdata))){
  print(colnames(rawdata)[col_i])
}
# edge-case of 0 elements -> 0 runs
for(col_i in seq_len(0)){
  print(colnames(rawdata)[col_i])
}
```

#### *while-loops*

*If not number of repetitions is know, but a condition.*

```{r}
test <- 0
while(test<10){
  print(test)
  test <- test + 1 
}
```

### *Conditions*

#### *if else*

*We can run code if condition(s) are true:*

```{r}
sex<-"female"
if(sex=="male") {
  print("Male")
} else {
  print("Female")
}

if(sex=="male")  {
  print("Male")
}

if(sex!="male"){
  print("Female")
}

testvar <- 4
if(testvar %in% c(1,3,5)){
  print("uneven")
} else {
  print("probably even")
}

TRUE & FALSE  # AND
all(TRUE, FALSE)
(1<10) & (sex=="male")
all(1<10,sex=="male")

TRUE | FALSE  # OR
any(TRUE, FALSE)

(1>10)|(1<5)
age <- 5
(sex=="female" & age<=12) | (sex=="male" & age <= 14)
any(all(sex=="female",age<=12), 
    all(sex=="male", age <= 14))
```

#### *ifelse*

*We can get text conditionally:*

```{r}
test <- "female"
print(ifelse(test = sex=="male",
             yes = "is male",
             no = "is female"))

p <- .12
paste0("That is ",
       ifelse(test = p<=.05,yes = "",no = "not "),
       "significant")

if(p>.05){
  sign_out <- "not "
} else {
  sign_out <- ""
}
paste0("That is ",
       sign_out,
       "significant")

```

#### *case_when / case_match*

*When there are many tests to do, case_when or case_match are nice replacements for ifelse. While case_when allows complex conditions, case_match is used for for simple comparisons:*

```{r}
rawdata <- mutate(.data = rawdata,
       Hypertension=case_when(
         `sysRR (mmHg)`<120 & `diaRR (mmHg)`<70 ~ "normotensive",
         `sysRR (mmHg)`<160 & `diaRR (mmHg)`<=80 ~ "borderline",
         .default = "hypertensive"),
       `prescribe something?` = case_match(
         Hypertension,
         "hypertensive" ~ "yes",
         "borderline" ~ "possibly",
         "normotensive" ~ "no"))
rawdata |> 
  select(contains("RR"),Hypertension, contains("pres"))
```
