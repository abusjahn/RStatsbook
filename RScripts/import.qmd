# Importing data

```{r}
pacman::p_load(conflicted,tidyverse, wrappedtools, 
               readxl, readODS, foreign, haven)
```

## Import from text files (.txt, .csv)

There are base functions like read.csv() and tidyverse-based updated ones like read_csv(). Different versions like read_csv2() or read_delim() have different settings for deliminators, number formats etc.

```{r}
rawdata <- read_csv2("data/Medtest_e.csv")
```

## Import from Excel

### Tidy Excel files

```{r}
rawdata <- read_excel(path = "data/Medtest_e.xlsx") |> 
  rename_with(.fn = ~str_replace_all(.x,pattern="_",replacement=" ")) |>
  rename_with(.fn=str_to_title,
              .cols = !contains(c("BP","BMI","NY"))) |> 
  rename(`Size (cm)`=Size, #newname=oldname
         `Weight (kg)`=Weight) |> 
  select(-`Sex M`)
saveRDS(rawdata,file = "data/rawdata.rds")
```

### ODS files

Package readODS provides similar functionality for OpenOffice/LibreOffice files.

### Excel file with units row

1.  Import names section and data section separately

2.  Loop over all columns

    1.  test for existence of unit, if not NA

    2.  paste 1st row, " \[", 2nd row,"\]"

3.  Use 1st row as colnames for data

```{r}
cn_temp <- read_excel(path = "data/Medtest_e.xlsx",
                      range = "A1:Y2",col_names = FALSE,
                      sheet = 2)
for(col_i in colnames(cn_temp)){
  if(!is.na(cn_temp |> slice(2) |> pull(col_i))){
    cn_temp[1,col_i] <- 
      paste0(cn_temp[1,col_i], " [", cn_temp[2,col_i], "]")
  }
}

rawdata <- read_excel(path = "data/Medtest_e.xlsx",
                      skip = 2, col_names = FALSE,
                      sheet = 2)
colnames(rawdata) <- cn_temp[1,]
```

## Import from SPSS/SAS

Import from SPSS generic files is implemented in various packages:

-   foreign::read.spss is a more base approach,

    -   on the positive side it has an option to read in value labels

    -   on the other hand it returns lists or data frames, so casting into tibble is advised

-   haven::read_sav comes from tidyverse

    -   variable- and value-labels are imported into attributes

    -   as_factor uses value labels

```{r}
import1 <- read.spss(file = "data/Zellbeads.sav",
                     to.data.frame = TRUE,
                     use.value.labels = TRUE)
str(import1)

import2 <- read_sav(file = "data/Zellbeads.sav")
str(import2$Bedingung)
attr(import2$Bedingung,"labels")
import2 <- mutate(import2,
                  Bedingung=as_factor(Bedingung))
str(import2$Bedingung)
```
