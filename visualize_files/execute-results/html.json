{
  "hash": "2a5cdbabfa37922a240d537ee553bd31",
  "result": {
    "markdown": "# Syntax rules / basic things to know about R\n\n## Script preparation / basic setup\n\nAt the beginning of (almost) every script we define packages to be used. This could be done by either\n\n-   checking if packages needed are installed and otherwise do so, followed by function `library(packagename)`\n\nOR\n\n-   simplifying this using function p_load() from package pacman; if you want to create fool-prof scripts, check for pacman and install if needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(pacman,quietly = TRUE)){\n  install.packages('pacman')\n}\npacman::p_load(\n  tidyverse, # metapackage \n  wrappedtools, # my own tools package\n  randomNames # used to create pseudo names\n  )\n```\n:::\n\n\n## Numeric operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### simple calculations ####\n2+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\n3*5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\n15/3 #not 15:3!!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\n9^0.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n10%%3 #modulo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Variables\n\n### Variable names\n\nNaming things is harder than you may expect. Try to be verbose and consistent in language and style. Commonly used are snake_case_style and CamelCaseStyle.\n\nDecide about computer-friendly (syntactical) or human-friendly names, illegal names can be used inside backticks: \\`measure \\[unit\\]\\`. My preference is syntactical for script variables and humane for data variables, e.g. column names, print labels etc.\n\nThere are rules for valid syntactical names:\n\n-   UPPERCASE and lowercase are distinguished\n\n-   start with letter or symbols as **.** **\\_** , but not with a number\n\n-   no mathematical symbols or brackets allowed\n\nTo store some value into a variable, use the assignment operator **\\<-** ; while it possible to use **=** or **-\\>** , this is rather unusual. Assignments are silent, so either a call of the variable, or `print()` / `cat()` function are needed to inspect. Alternatively, put brackets around assignment: (varname \\<- content).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Variable names ####\ntest <- 1\ntest1 <- 1\n# 1test <- 2 # wrong, would result in error\n`1test` <- 2 # this would be possible\ntest_1<- 5\ntest.1 <- 2\n`test-1` <- 6\n`test(1)` <- 5\nTest <- 'bla'\nHereAreFilteredData <- '' #CamelCase\nhere_are_filtered_data <- \"test\" #snake_case\n`Gewicht [kg]` <- 67\n```\n:::\n\n\n### Basic classes of data\n\nR is 'guessing' the suitable type of data from input. This should be checked after e.g. importing data! If elements of different classes are found, the more inclusive is used. There are functions to change / force a type if needed.\n\nThe **`class()`** function returns the class of an object, which determines how it behaves with respect to functions like **`print()`**. The class of an object can be changed by using generic functions and methods.\n\nThe **`typeof()`** function returns the basic data type of an object, which determines how it is stored in memory. The basic data type of an object cannot be changed.\n\nThe **`str()`** function shows class and examples of an object.\n\n#### Guessed classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfloat_num <- 123.456\nclass(float_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(float_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nint_num <- 123L # L specifies integer, guessing requires more values\nclass(int_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(int_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nresult<-9^(1/2)\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ncat(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n\n```{.r .cell-code}\nchar_var <- ' some words'\nclass(char_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(char_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nlogical_var <- TRUE\nclass(logical_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(logical_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nlogical(length = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n# logicals usualy are defined by conditions:\nint_num < float_num\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# all numbers are true but 0\nas.logical(c(0,1,5,-7.45678)) # c() combines values into a vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nfactor_var <- factor(c(\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"?\"))\nfactor_var\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] m m f m f f ?\nLevels: ? f m\n```\n:::\n\n```{.r .cell-code}\nclass(factor_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(factor_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\n# factor definition can reorder, rename, and drop levels:\nfactor_var2 <- factor(c(\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"?\"),\n                     levels=c(\"m\",\"f\"),\n                     labels=c(\"male\",\"female\"))\nfactor_var2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] male   male   female male   female female <NA>  \nLevels: male female\n```\n:::\n\n```{.r .cell-code}\n# everything intended to group subjects or representing categories should be stored as factor\n# package forcats provides nice tools for factors\n\n(date_var <- Sys.Date())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-07-06\"\n```\n:::\n\n```{.r .cell-code}\nclass(date_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(date_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\n# mixed classes\ntest2 <- c(1,2,'a','b')\nclass(test2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n#### Forcing / casting classes\n\nCasting functions usually start with as\\_ , when creating variables filled with NA, use casting functions or specific variants of NA to force type!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(test<-c(1,2,3,'a','b','c')) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\n(test_n<-as.numeric(test))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs durch Umwandlung erzeugt\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  3 NA NA NA\n```\n:::\n\n```{.r .cell-code}\nas.numeric(factor_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 3 2 3 2 2 1\n```\n:::\n\n```{.r .cell-code}\nas.character(10:19)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"17\" \"18\" \"19\"\n```\n:::\n\n```{.r .cell-code}\n# NAs\nclass(NA_real_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(NA_integer_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(NA_character_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(NA_Date_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n\n### Indexing variables\n\nThe most general kind of indexing is by position, starting with 1. Negative numbers result in exclusion of position(s). Position indices are provided within square brackets. The index can be a variable instead of hard coded numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(numbers1<-c(5,3,6,8,2,1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 3 6 8 2 1\n```\n:::\n\n```{.r .cell-code}\nnumbers1[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nnumbers1[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 3 6\n```\n:::\n\n```{.r .cell-code}\nnumbers1[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 6 8 2 1\n```\n:::\n\n```{.r .cell-code}\nnumbers2 <- 1:3\nnumbers1[numbers2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 3 6\n```\n:::\n:::\n\n\nTo get first or last entries, head() and tail() can be used. By default 6 entries are returned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(x=numbers1,n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nhead(x = numbers1, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 3 6\n```\n:::\n:::\n\n\n### Usage of variables\n\nVariables are like placeholders for their content, so that you don't have to remember where you left things. Operations on variables are operations on their content. Changing the content of a variable does not automatically save those changes back to the variable, this needs to be done explicitly!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers1+100 # not stored anywhere, just printed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 105 103 106 108 102 101\n```\n:::\n\n```{.r .cell-code}\nnumbers1+numbers2 # why does this even work?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6 5 9 9 4 4\n```\n:::\n:::\n\n\nWhen combining variables of different length, the short one is recycled, so the numbers2 is added to the first 3 elements of numbers2, then is reused and added to the remaining 3 elements. If the length of the longer is not a multiple of the shorter, there will be a warning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2,4,6,8)+1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 5 7 9\n```\n:::\n\n```{.r .cell-code}\nc(2,4,6,8)+c(1,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  6  7 10\n```\n:::\n\n```{.r .cell-code}\nc(2,4,6,8)+c(1,2,3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in c(2, 4, 6, 8) + c(1, 2, 3): Länge des längeren Objektes\n \t ist kein Vielfaches der Länge des kürzeren Objektes\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 6 9 9\n```\n:::\n:::\n\n\n## Functions\n\nFunctions have the same naming rules as variables, but the name is always followed by opening/closing round brackets, within those brackets function parameters/arguments can be specified to provide input or control behavior:\n\nFunctionName(parameter1=x1,parameter2=x2,x3,...)\n\nMost functions have named arguments, those argument names may be omitted as long as parameter values are supplied in the defined order. Arguments may have predefined default values, see help! Some functions like `c()` use unnamed arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc('my','name') # unnamed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"my\"   \"name\"\n```\n:::\n\n```{.r .cell-code}\n?mean\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarte den http Server für die Hilfe fertig\n```\n:::\n\n```{.r .cell-code}\nmean(x = c(3,5,7,NA)) #using default parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(x = c(3,5,7,NA),na.rm = TRUE) #overriding default parameter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nmean(na.rm = TRUE, x=c(3,5,7,NA)) # changed order of arguments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nmean(c(3,5,7,NA), na.rm = TRUE) # name of 1st argument omitted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nsd(c(3,5,7,NA), na.rm = TRUE) # same logic as mean, partially the same arguments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nmedian(1:100, TRUE) # does influence the readability of a function, careful!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.5\n```\n:::\n:::\n\n\nFunctions often just solve one problem or task, so often we need combine them. This can be done by nesting or piping. Piping makes reading/understanding scripts easier, as it shows order of functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# functions may be nested:\nfloor(\n  as.numeric(\n    Sys.Date() -\n      as.Date('1985/12/10'))/\n    365.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 37\n```\n:::\n\n```{.r .cell-code}\n# or (usually better) piped:\nmtcars |>\n  mutate(am=factor(am))  |>\n  filter(vs==1) |>\n  group_by(am) |>\n  summarize(across(.cols = c(wt, mpg, qsec, disp),\n                   .fns = mean))  |>\n  pivot_longer(cols = -am, names_to = 'Measure')  |>\n  pivot_wider(id_cols = Measure, names_from = am,\n              values_from = value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  Measure    `0`   `1`\n  <chr>    <dbl> <dbl>\n1 wt        3.19  2.03\n2 mpg      20.7  28.4 \n3 qsec     20.0  18.7 \n4 disp    175.   89.8 \n```\n:::\n:::\n\n\nIf a sequence of functions is used often, combining them into a new function is advisable, e.g. this combination of descriptive and test statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# can be combined into higher order functions:\ncompare2numvars(data = mtcars,\n                dep_vars = c('mpg','wt','qsec'),\n                indep_var = 'am',\n                add_n = TRUE,\n                gaussian = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  Variable desc_all          `am 0`            `am 1`            p    \n  <fct>    <chr>             <chr>             <chr>             <chr>\n1 mpg      20 ± 6  [n=32]    17 ± 4  [n=19]    24 ± 6  [n=13]    0.001\n2 wt       3.2 ± 1.0  [n=32] 3.8 ± 0.8  [n=19] 2.4 ± 0.6  [n=13] 0.001\n3 qsec     18 ± 2  [n=32]    18 ± 2  [n=19]    17 ± 2  [n=13]    0.206\n```\n:::\n:::\n\n\n## More complex data types, created by functions\n\n### Matrix\n\nA matrix is a 2-dimensional data structure, where all elements are of the same class.\n\n#### Creation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy1.Matrix<-\n  matrix(data=1:12,\n         # nrow=4, # this is not needed, as it can be derived from data\n         ncol=3,\n         byrow=T, # date are put into row 1 first\n         dimnames=list(paste0('row',1:4),\n                       paste0('col',1:3)))\nprint(my1.Matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3\nrow1    1    2    3\nrow2    4    5    6\nrow3    7    8    9\nrow4   10   11   12\n```\n:::\n\n```{.r .cell-code}\ndata <- 1:100\nnrow <- 20\nmatrix(data=data,\n       nrow=nrow,\n       byrow=F, # data are put into column 1 first\n       dimnames=list(paste0('row',1:nrow),\n                     paste0('col',1:(length(data)/nrow))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      col1 col2 col3 col4 col5\nrow1     1   21   41   61   81\nrow2     2   22   42   62   82\nrow3     3   23   43   63   83\nrow4     4   24   44   64   84\nrow5     5   25   45   65   85\nrow6     6   26   46   66   86\nrow7     7   27   47   67   87\nrow8     8   28   48   68   88\nrow9     9   29   49   69   89\nrow10   10   30   50   70   90\nrow11   11   31   51   71   91\nrow12   12   32   52   72   92\nrow13   13   33   53   73   93\nrow14   14   34   54   74   94\nrow15   15   35   55   75   95\nrow16   16   36   56   76   96\nrow17   17   37   57   77   97\nrow18   18   38   58   78   98\nrow19   19   39   59   79   99\nrow20   20   40   60   80  100\n```\n:::\n\n```{.r .cell-code}\nmdat <- matrix(c(1,2,3, 11,12,13),\n               nrow = 2, ncol=3) #byrow=FALSE, not specified but default\nmdat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3   12\n[2,]    2   11   13\n```\n:::\n:::\n\n\n#### Indexing\n\nAddressing a matrix is done with \\[row_index, column_index\\]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy1.Matrix[2,3] # Index:[row,column]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nmy1.Matrix[2,] # all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncol1 col2 col3 \n   4    5    6 \n```\n:::\n\n```{.r .cell-code}\nmy1.Matrix[,2] # all rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrow1 row2 row3 row4 \n   2    5    8   11 \n```\n:::\n\n```{.r .cell-code}\nmy1.Matrix[c(1,3),-2] # exclude column 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col3\nrow1    1    3\nrow3    7    9\n```\n:::\n\n```{.r .cell-code}\nmy1.Matrix[1,1]<-NA # Index can be used for writing as well\n```\n:::\n\n\n### Data frame\n\nA data frame has 2 dimensions, it can handle various data types (1 per columns). This structure is rather superseded by tibbles (see below).\n\n#### Creation\n\nData frames are defined by creating and filling columns, functions can be used (and piped) to create content.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatientN<-15\n(myTable<-data.frame(\n  patientCode=paste0('pat',1:patientN),\n  Var1=1, # gets recycled\n  Var2=NA_Date_))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patientCode Var1 Var2\n1         pat1    1 <NA>\n2         pat2    1 <NA>\n3         pat3    1 <NA>\n4         pat4    1 <NA>\n5         pat5    1 <NA>\n6         pat6    1 <NA>\n7         pat7    1 <NA>\n8         pat8    1 <NA>\n9         pat9    1 <NA>\n10       pat10    1 <NA>\n11       pat11    1 <NA>\n12       pat12    1 <NA>\n13       pat13    1 <NA>\n14       pat14    1 <NA>\n15       pat15    1 <NA>\n```\n:::\n\n```{.r .cell-code}\nstr(myTable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t15 obs. of  3 variables:\n $ patientCode: chr  \"pat1\" \"pat2\" \"pat3\" \"pat4\" ...\n $ Var1       : num  1 1 1 1 1 1 1 1 1 1 ...\n $ Var2       : Date, format: NA NA ...\n```\n:::\n\n```{.r .cell-code}\nset.seed(101)\nmyTable<-data.frame(\n  patientCode=paste0('pat',1:patientN),\n  Age=runif(n=patientN,min=18,max=65)  |>  floor(),\n  Sex=factor(rep(x=NA,times=patientN),\n             levels=c('m','f')),\n  sysRR=round(rnorm(n=patientN,mean=140,sd=10)))\nhead(myTable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  patientCode Age  Sex sysRR\n1        pat1  35 <NA>   142\n2        pat2  20 <NA>   132\n3        pat3  51 <NA>   122\n4        pat4  48 <NA>   157\n5        pat5  29 <NA>   144\n6        pat6  32 <NA>   148\n```\n:::\n:::\n\n\n#### Indexing\n\nBeside the numeric index, columns can be addressed by name. This can be done by either dfname\\$colname (for the content of a single column) or dfname\\[,\"colname\"\\] for 1 or more columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyTable[1:5,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pat1\" \"pat2\" \"pat3\" \"pat4\" \"pat5\"\n```\n:::\n\n```{.r .cell-code}\nmyTable$patientCode[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pat1\" \"pat2\" \"pat3\" \"pat4\" \"pat5\"\n```\n:::\n\n```{.r .cell-code}\nmyTable[1:5,\"patientCode\"] # returns vector of values for a single column, df otherwise\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pat1\" \"pat2\" \"pat3\" \"pat4\" \"pat5\"\n```\n:::\n\n```{.r .cell-code}\nmyTable[\"patientCode\"] # returns df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patientCode\n1         pat1\n2         pat2\n3         pat3\n4         pat4\n5         pat5\n6         pat6\n7         pat7\n8         pat8\n9         pat9\n10       pat10\n11       pat11\n12       pat12\n13       pat13\n14       pat14\n15       pat15\n```\n:::\n\n```{.r .cell-code}\nspalten<-c('Sex',\"Age\")\nmyTable[1:5,spalten]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Sex Age\n1 <NA>  35\n2 <NA>  20\n3 <NA>  51\n4 <NA>  48\n5 <NA>  29\n```\n:::\n\n```{.r .cell-code}\nmyTable[1:5,c('patientCode','Age')]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  patientCode Age\n1        pat1  35\n2        pat2  20\n3        pat3  51\n4        pat4  48\n5        pat5  29\n```\n:::\n\n```{.r .cell-code}\nmyTable[,1]<-paste0('Code',1:patientN) \n```\n:::\n\n\n### Tibble\n\nTibbles are a modern and efficient data structure that extend data frames, providing enhanced features and performance for data manipulation and analysis.\n\n#### Creation\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatientN <- 200\nrawdata <- tibble(\n  PatID=paste('P',1:patientN), # as in  data.frame\n  Sex=sample(x = c('male','female'),  # random generator\n             size = patientN,replace = T,\n             prob = c(.7,.3)),\n  Ethnicity=sample(1:6,patientN,T,c(.01,.01,.05,.03,.75,.15)), # random assignments\n  `Given name`=randomNames(n = patientN,\n                           gender = Sex, # this is a reference to column Sex\n                           ethnicity = Ethnicity,\n                           which.names = 'first'),\n  `Family name`=randomNames(n = patientN,\n                            ethnicity = Ethnicity,\n                            which.names = 'last'),\n  Treatment=sample(c('Placebo','Verum'),patientN,T),\n  `sysRR (mmHg)`=round(rnorm(n=patientN,mean=140,sd=10))-\n    (Treatment=='Verum')*15,\n  diaRR=round(rnorm(n=patientN,mean=80,sd=10))-\n    (Treatment=='Verum')*10,\n  HR=round(rnorm(n=patientN,mean=90,sd=7)))\nrawdata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 9\n   PatID Sex    Ethnicity `Given name` `Family name` Treatment `sysRR (mmHg)`\n   <chr> <chr>      <int> <chr>        <chr>         <chr>              <dbl>\n 1 P 1   male           5 Jackson      Vahlenkamp    Verum                 99\n 2 P 2   male           5 Bradley      Sivers        Verum                134\n 3 P 3   female         5 Bre          Jerome        Placebo              129\n 4 P 4   female         5 Hannah       Knight        Placebo              144\n 5 P 5   male           5 Tell         Howard        Placebo              154\n 6 P 6   male           5 Christian    Cheesman      Verum                123\n 7 P 7   male           5 Travis       Mcclellan     Placebo              149\n 8 P 8   male           5 Tanner       Srebniak      Placebo              145\n 9 P 9   female         6 Aatika       el-Basa       Verum                118\n10 P 10  male           5 Eric         Stephenson    Verum                110\n# ℹ 190 more rows\n# ℹ 2 more variables: diaRR <dbl>, HR <dbl>\n```\n:::\n\n```{.r .cell-code}\ncolnames(rawdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PatID\"        \"Sex\"          \"Ethnicity\"    \"Given name\"   \"Family name\" \n[6] \"Treatment\"    \"sysRR (mmHg)\" \"diaRR\"        \"HR\"          \n```\n:::\n\n```{.r .cell-code}\ncn() # shortcut from wrappedtools\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PatID\"        \"Sex\"          \"Ethnicity\"    \"Given name\"   \"Family name\" \n[6] \"Treatment\"    \"sysRR (mmHg)\" \"diaRR\"        \"HR\"          \n```\n:::\n\n```{.r .cell-code}\n# example of data management for a tibble, recoding ethnicity:\nrawdata <- rawdata  |>\n  mutate(Ethnicity=factor(\n    Ethnicity,levels = 1:6,\n    labels=\tc(\n      'American Indian or Native Alaskan',\n      'Asian or Pacific Islander',\n      'Black (not Hispanic)',\n      'Hispanic',\n      'White (not Hispanic)',\n      'Middle-Eastern, Arabic')))\n# quick visual inspection\nggplot(rawdata,aes(x = Treatment,y = `sysRR (mmHg)`))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### Indexing\n\nThe same rules as for the data frame, but more consistent behavior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrawdata[1:5,1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  PatID Sex   \n  <chr> <chr> \n1 P 1   male  \n2 P 2   male  \n3 P 3   female\n4 P 4   female\n5 P 5   male  \n```\n:::\n\n```{.r .cell-code}\nrawdata[,6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 1\n   Treatment\n   <chr>    \n 1 Verum    \n 2 Verum    \n 3 Placebo  \n 4 Placebo  \n 5 Placebo  \n 6 Verum    \n 7 Placebo  \n 8 Placebo  \n 9 Verum    \n10 Verum    \n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata[6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 1\n   Treatment\n   <chr>    \n 1 Verum    \n 2 Verum    \n 3 Placebo  \n 4 Placebo  \n 5 Placebo  \n 6 Verum    \n 7 Placebo  \n 8 Placebo  \n 9 Verum    \n10 Verum    \n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata[[6]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\"\n  [8] \"Placebo\" \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"  \n [15] \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"  \n [22] \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"  \n [29] \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"  \n [36] \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\"\n [43] \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"  \n [50] \"Placebo\" \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"   \"Verum\"   \"Verum\"  \n [57] \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"  \n [64] \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\"\n [71] \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\"\n [78] \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\"\n [85] \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"  \n [92] \"Placebo\" \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"  \n [99] \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"  \n[106] \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"  \n[113] \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"  \n[120] \"Verum\"   \"Placebo\" \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\"\n[127] \"Placebo\" \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"  \n[134] \"Placebo\" \"Placebo\" \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"  \n[141] \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\"\n[148] \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"   \"Verum\"  \n[155] \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\" \"Verum\"  \n[162] \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"  \n[169] \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Placebo\" \"Verum\"  \n[176] \"Verum\"   \"Verum\"   \"Placebo\" \"Placebo\" \"Verum\"   \"Verum\"   \"Placebo\"\n[183] \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"  \n[190] \"Verum\"   \"Verum\"   \"Verum\"   \"Verum\"   \"Placebo\" \"Verum\"   \"Placebo\"\n[197] \"Placebo\" \"Placebo\" \"Verum\"   \"Placebo\"\n```\n:::\n\n```{.r .cell-code}\nrawdata$`Family name`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"Vahlenkamp\"        \"Sivers\"            \"Jerome\"           \n  [4] \"Knight\"            \"Howard\"            \"Cheesman\"         \n  [7] \"Mcclellan\"         \"Srebniak\"          \"el-Basa\"          \n [10] \"Stephenson\"        \"Reed\"              \"Montellano\"       \n [13] \"al-Mansouri\"       \"Deeb\"              \"Scurto\"           \n [16] \"Tebbe\"             \"Snyder\"            \"Schaffer\"         \n [19] \"Sidrow\"            \"Miklin\"            \"el-Rashid\"        \n [22] \"Welder\"            \"Moreland\"          \"al-Aydin\"         \n [25] \"el-Amer\"           \"Lorey Mcmahon\"     \"Spalding\"         \n [28] \"Gallegos\"          \"Ball\"              \"Perez\"            \n [31] \"Goodburn\"          \"Brooks\"            \"Farris\"           \n [34] \"Dyer\"              \"Taylor\"            \"Tucker\"           \n [37] \"Munson\"            \"Mcbeth\"            \"Berg\"             \n [40] \"St Clair\"          \"Ford\"              \"Whiston\"          \n [43] \"Durocher-Harleman\" \"Malmquist\"         \"Woolley\"          \n [46] \"Fanning\"           \"Stark\"             \"Mclaughlin\"       \n [49] \"el-Qadir\"          \"Mitchell\"          \"Nixon\"            \n [52] \"Tanner\"            \"Willison\"          \"Preciado\"         \n [55] \"Wolf\"              \"Hall\"              \"Smith\"            \n [58] \"Broyles\"           \"Dietrick\"          \"Thomas\"           \n [61] \"De Alba\"           \"al-Odeh\"           \"Kingston\"         \n [64] \"Turner\"            \"Collupy\"           \"Hoggard\"          \n [67] \"el-Selim\"          \"Glaves\"            \"Holden\"           \n [70] \"Seth\"              \"el-Tariq\"          \"Hardison\"         \n [73] \"Bertsch\"           \"Abrams\"            \"Flathers\"         \n [76] \"Jeffryes\"          \"Buchanan\"          \"Danielson\"        \n [79] \"East\"              \"Fognani\"           \"el-Barakat\"       \n [82] \"Freeman\"           \"Perez\"             \"Hilton\"           \n [85] \"Anderson Casey\"    \"al-Huda\"           \"el-Rassi\"         \n [88] \"Dillie\"            \"Heimbrock\"         \"Testroet\"         \n [91] \"Harris\"            \"Moldenhauer\"       \"Hockley\"          \n [94] \"Willis\"            \"Wicks\"             \"Rastall\"          \n [97] \"Montgomery\"        \"Nelson\"            \"Lydeen\"           \n[100] \"el-Abdi\"           \"Garner\"            \"al-Wahba\"         \n[103] \"Leslie\"            \"Cottrell\"          \"Hershberger\"      \n[106] \"el-Safar\"          \"Bellis\"            \"Truesdale\"        \n[109] \"Reiher\"            \"Newton-Bustamante\" \"Hasson\"           \n[112] \"el-Murad\"          \"Allen\"             \"Mcdonald\"         \n[115] \"Hartman\"           \"al-Malek\"          \"Schoneman\"        \n[118] \"Williams\"          \"Crapsey\"           \"Levy\"             \n[121] \"Sorenson\"          \"Mcnamee\"           \"Bennett\"          \n[124] \"Tipton\"            \"el-Pour\"           \"Larson\"           \n[127] \"Martinez\"          \"Blackney\"          \"Baldwin\"          \n[130] \"Creamer\"           \"Lee\"               \"Putzstuck\"        \n[133] \"el-Yamin\"          \"Hernandez\"         \"Montoya\"          \n[136] \"Emmons\"            \"Wilson\"            \"Linman\"           \n[139] \"Sharp\"             \"Pier\"              \"O'Leary\"          \n[142] \"Woerpel\"           \"Newton\"            \"Geary\"            \n[145] \"Swearnger\"         \"Vigil\"             \"Barela\"           \n[148] \"Moss\"              \"al-Agha\"           \"Cerceda Martinez\" \n[151] \"Swan\"              \"Barber\"            \"Kuetemann\"        \n[154] \"Miller\"            \"Byers\"             \"Romero\"           \n[157] \"al-Greiss\"         \"Roybal\"            \"al-Bari\"          \n[160] \"Maestas\"           \"Rodriguez\"         \"Aschenbrenner\"    \n[163] \"el-Madani\"         \"al-Karimi\"         \"Winkelman\"        \n[166] \"al-Masood\"         \"Swihart\"           \"Goodrich\"         \n[169] \"Sullivan\"          \"Kessler\"           \"Jacquez\"          \n[172] \"Shippley\"          \"Dyl\"               \"Wells\"            \n[175] \"Hansen\"            \"Williams\"          \"Hernandez\"        \n[178] \"Cain\"              \"Smith\"             \"Cooper\"           \n[181] \"Fisher\"            \"Mclaughlin\"        \"al-Samra\"         \n[184] \"Kennis\"            \"al-Salih\"          \"al-Rasheed\"       \n[187] \"el-Ayoob\"          \"Roberts\"           \"Mosher\"           \n[190] \"Wernsman\"          \"Parrish\"           \"Davis\"            \n[193] \"Brooks\"            \"al-Hassen\"         \"Hilzer\"           \n[196] \"al-Raad\"           \"Benjamin\"          \"Hastings\"         \n[199] \"Korosec\"           \"Funk\"             \n```\n:::\n:::\n\n\nDifferences in addressing data frames and tibbles:\n\n-   tibble and \\[ always returns tibble\n\n-   tibble and \\[\\[ always returns vector\n\n-   data.frame and \\[ may return data.frame (if \\>1 column) or vector\n\n-   data.frame and \\[\\[ always returns vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrawdata_df <- as.data.frame(rawdata)\nrawdata[2] #returns Tibble with 1 column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 1\n   Sex   \n   <chr> \n 1 male  \n 2 male  \n 3 female\n 4 female\n 5 male  \n 6 male  \n 7 male  \n 8 male  \n 9 female\n10 male  \n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata[[2]] #returns vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n  [9] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [17] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [25] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [33] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n [41] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [49] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [57] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n [65] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"female\"\n [73] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [81] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [89] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [97] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n[105] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[113] \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n[121] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"male\"  \n[129] \"female\" \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\"\n[137] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[145] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[153] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n[161] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n[169] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[177] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n[185] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[193] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n```\n:::\n\n```{.r .cell-code}\nrawdata[,2] #returns Tibble with 1 column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 1\n   Sex   \n   <chr> \n 1 male  \n 2 male  \n 3 female\n 4 female\n 5 male  \n 6 male  \n 7 male  \n 8 male  \n 9 female\n10 male  \n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata[,2:3] #returns tibble with 2 columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 2\n   Sex    Ethnicity             \n   <chr>  <fct>                 \n 1 male   White (not Hispanic)  \n 2 male   White (not Hispanic)  \n 3 female White (not Hispanic)  \n 4 female White (not Hispanic)  \n 5 male   White (not Hispanic)  \n 6 male   White (not Hispanic)  \n 7 male   White (not Hispanic)  \n 8 male   White (not Hispanic)  \n 9 female Middle-Eastern, Arabic\n10 male   White (not Hispanic)  \n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata_df[2] #returns DF with 1 column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Sex\n1     male\n2     male\n3   female\n4   female\n5     male\n6     male\n7     male\n8     male\n9   female\n10    male\n11  female\n12    male\n13    male\n14    male\n15    male\n16  female\n17  female\n18    male\n19  female\n20  female\n21  female\n22    male\n23    male\n24  female\n25  female\n26    male\n27  female\n28    male\n29  female\n30  female\n31    male\n32    male\n33    male\n34    male\n35  female\n36    male\n37  female\n38  female\n39  female\n40    male\n41  female\n42    male\n43    male\n44    male\n45    male\n46    male\n47  female\n48  female\n49    male\n50    male\n51  female\n52    male\n53    male\n54    male\n55    male\n56    male\n57    male\n58    male\n59  female\n60  female\n61    male\n62    male\n63    male\n64  female\n65  female\n66    male\n67    male\n68    male\n69  female\n70  female\n71  female\n72  female\n73    male\n74    male\n75    male\n76    male\n77    male\n78    male\n79    male\n80    male\n81  female\n82    male\n83    male\n84    male\n85    male\n86    male\n87    male\n88    male\n89    male\n90    male\n91    male\n92    male\n93  female\n94    male\n95    male\n96  female\n97    male\n98  female\n99    male\n100 female\n101   male\n102   male\n103   male\n104   male\n105   male\n106   male\n107   male\n108   male\n109 female\n110   male\n111   male\n112   male\n113 female\n114   male\n115 female\n116 female\n117   male\n118 female\n119   male\n120   male\n121 female\n122   male\n123 female\n124   male\n125   male\n126   male\n127 female\n128   male\n129 female\n130 female\n131 female\n132 female\n133 female\n134 female\n135   male\n136 female\n137 female\n138   male\n139   male\n140   male\n141   male\n142   male\n143   male\n144   male\n145   male\n146   male\n147   male\n148   male\n149   male\n150 female\n151   male\n152   male\n153 female\n154   male\n155   male\n156   male\n157   male\n158   male\n159   male\n160 female\n161   male\n162 female\n163   male\n164 female\n165   male\n166   male\n167 female\n168   male\n169   male\n170   male\n171   male\n172   male\n173   male\n174 female\n175   male\n176   male\n177   male\n178   male\n179   male\n180   male\n181   male\n182 female\n183   male\n184 female\n185 female\n186   male\n187   male\n188   male\n189   male\n190   male\n191   male\n192   male\n193   male\n194 female\n195   male\n196   male\n197 female\n198   male\n199   male\n200   male\n```\n:::\n\n```{.r .cell-code}\nrawdata_df[[2]] #returns vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n  [9] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [17] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [25] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [33] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n [41] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [49] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [57] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n [65] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"female\"\n [73] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [81] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [89] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [97] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n[105] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[113] \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n[121] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"male\"  \n[129] \"female\" \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\"\n[137] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[145] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[153] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n[161] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n[169] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[177] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n[185] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[193] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n```\n:::\n\n```{.r .cell-code}\nrawdata_df[,2] #returns vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n  [9] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [17] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [25] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [33] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n [41] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [49] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [57] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n [65] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"female\"\n [73] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [81] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [89] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [97] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n[105] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[113] \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n[121] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"male\"  \n[129] \"female\" \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\"\n[137] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[145] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[153] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n[161] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n[169] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[177] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n[185] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[193] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n```\n:::\n\n```{.r .cell-code}\nrawdata_df[,2:3] #returns DF with 2 columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Sex                         Ethnicity\n1     male              White (not Hispanic)\n2     male              White (not Hispanic)\n3   female              White (not Hispanic)\n4   female              White (not Hispanic)\n5     male              White (not Hispanic)\n6     male              White (not Hispanic)\n7     male              White (not Hispanic)\n8     male              White (not Hispanic)\n9   female            Middle-Eastern, Arabic\n10    male              White (not Hispanic)\n11  female              White (not Hispanic)\n12    male                          Hispanic\n13    male            Middle-Eastern, Arabic\n14    male              White (not Hispanic)\n15    male              White (not Hispanic)\n16  female              White (not Hispanic)\n17  female              White (not Hispanic)\n18    male              White (not Hispanic)\n19  female              White (not Hispanic)\n20  female              White (not Hispanic)\n21  female            Middle-Eastern, Arabic\n22    male              White (not Hispanic)\n23    male              White (not Hispanic)\n24  female            Middle-Eastern, Arabic\n25  female            Middle-Eastern, Arabic\n26    male              White (not Hispanic)\n27  female              White (not Hispanic)\n28    male                          Hispanic\n29  female              White (not Hispanic)\n30  female                          Hispanic\n31    male              White (not Hispanic)\n32    male              Black (not Hispanic)\n33    male              White (not Hispanic)\n34    male              White (not Hispanic)\n35  female              White (not Hispanic)\n36    male              White (not Hispanic)\n37  female              White (not Hispanic)\n38  female              White (not Hispanic)\n39  female              White (not Hispanic)\n40    male              White (not Hispanic)\n41  female              White (not Hispanic)\n42    male              White (not Hispanic)\n43    male              White (not Hispanic)\n44    male              White (not Hispanic)\n45    male              White (not Hispanic)\n46    male              White (not Hispanic)\n47  female         Asian or Pacific Islander\n48  female              White (not Hispanic)\n49    male            Middle-Eastern, Arabic\n50    male              White (not Hispanic)\n51  female              White (not Hispanic)\n52    male              White (not Hispanic)\n53    male              Black (not Hispanic)\n54    male              White (not Hispanic)\n55    male              White (not Hispanic)\n56    male              White (not Hispanic)\n57    male              White (not Hispanic)\n58    male              White (not Hispanic)\n59  female              White (not Hispanic)\n60  female              White (not Hispanic)\n61    male              White (not Hispanic)\n62    male            Middle-Eastern, Arabic\n63    male              White (not Hispanic)\n64  female              White (not Hispanic)\n65  female              White (not Hispanic)\n66    male              White (not Hispanic)\n67    male            Middle-Eastern, Arabic\n68    male              White (not Hispanic)\n69  female              White (not Hispanic)\n70  female         Asian or Pacific Islander\n71  female            Middle-Eastern, Arabic\n72  female              White (not Hispanic)\n73    male              White (not Hispanic)\n74    male              White (not Hispanic)\n75    male              White (not Hispanic)\n76    male              White (not Hispanic)\n77    male              White (not Hispanic)\n78    male              White (not Hispanic)\n79    male              White (not Hispanic)\n80    male              White (not Hispanic)\n81  female            Middle-Eastern, Arabic\n82    male              White (not Hispanic)\n83    male              White (not Hispanic)\n84    male              White (not Hispanic)\n85    male              White (not Hispanic)\n86    male            Middle-Eastern, Arabic\n87    male            Middle-Eastern, Arabic\n88    male              White (not Hispanic)\n89    male              White (not Hispanic)\n90    male              White (not Hispanic)\n91    male              White (not Hispanic)\n92    male              White (not Hispanic)\n93  female              White (not Hispanic)\n94    male              White (not Hispanic)\n95    male              White (not Hispanic)\n96  female              White (not Hispanic)\n97    male              Black (not Hispanic)\n98  female              White (not Hispanic)\n99    male              White (not Hispanic)\n100 female            Middle-Eastern, Arabic\n101   male              Black (not Hispanic)\n102   male            Middle-Eastern, Arabic\n103   male              White (not Hispanic)\n104   male              White (not Hispanic)\n105   male              White (not Hispanic)\n106   male            Middle-Eastern, Arabic\n107   male              White (not Hispanic)\n108   male              White (not Hispanic)\n109 female              White (not Hispanic)\n110   male              White (not Hispanic)\n111   male              White (not Hispanic)\n112   male            Middle-Eastern, Arabic\n113 female              White (not Hispanic)\n114   male              White (not Hispanic)\n115 female              White (not Hispanic)\n116 female            Middle-Eastern, Arabic\n117   male              White (not Hispanic)\n118 female              White (not Hispanic)\n119   male              White (not Hispanic)\n120   male              White (not Hispanic)\n121 female              White (not Hispanic)\n122   male              White (not Hispanic)\n123 female              White (not Hispanic)\n124   male              White (not Hispanic)\n125   male            Middle-Eastern, Arabic\n126   male              White (not Hispanic)\n127 female              White (not Hispanic)\n128   male              White (not Hispanic)\n129 female              White (not Hispanic)\n130 female              White (not Hispanic)\n131 female American Indian or Native Alaskan\n132 female              White (not Hispanic)\n133 female            Middle-Eastern, Arabic\n134 female                          Hispanic\n135   male              White (not Hispanic)\n136 female              White (not Hispanic)\n137 female              White (not Hispanic)\n138   male              White (not Hispanic)\n139   male              White (not Hispanic)\n140   male              Black (not Hispanic)\n141   male              White (not Hispanic)\n142   male              White (not Hispanic)\n143   male              White (not Hispanic)\n144   male              White (not Hispanic)\n145   male              Black (not Hispanic)\n146   male              White (not Hispanic)\n147   male              White (not Hispanic)\n148   male              White (not Hispanic)\n149   male            Middle-Eastern, Arabic\n150 female                          Hispanic\n151   male              White (not Hispanic)\n152   male              White (not Hispanic)\n153 female              White (not Hispanic)\n154   male              White (not Hispanic)\n155   male              White (not Hispanic)\n156   male              White (not Hispanic)\n157   male            Middle-Eastern, Arabic\n158   male              White (not Hispanic)\n159   male            Middle-Eastern, Arabic\n160 female              White (not Hispanic)\n161   male                          Hispanic\n162 female              White (not Hispanic)\n163   male            Middle-Eastern, Arabic\n164 female            Middle-Eastern, Arabic\n165   male              White (not Hispanic)\n166   male            Middle-Eastern, Arabic\n167 female              White (not Hispanic)\n168   male              White (not Hispanic)\n169   male              White (not Hispanic)\n170   male              White (not Hispanic)\n171   male American Indian or Native Alaskan\n172   male              White (not Hispanic)\n173   male              White (not Hispanic)\n174 female              White (not Hispanic)\n175   male              White (not Hispanic)\n176   male              Black (not Hispanic)\n177   male                          Hispanic\n178   male              White (not Hispanic)\n179   male              White (not Hispanic)\n180   male              White (not Hispanic)\n181   male              White (not Hispanic)\n182 female              White (not Hispanic)\n183   male            Middle-Eastern, Arabic\n184 female              Black (not Hispanic)\n185 female            Middle-Eastern, Arabic\n186   male            Middle-Eastern, Arabic\n187   male            Middle-Eastern, Arabic\n188   male              White (not Hispanic)\n189   male              White (not Hispanic)\n190   male              White (not Hispanic)\n191   male              White (not Hispanic)\n192   male              White (not Hispanic)\n193   male              White (not Hispanic)\n194 female            Middle-Eastern, Arabic\n195   male              White (not Hispanic)\n196   male            Middle-Eastern, Arabic\n197 female                          Hispanic\n198   male              White (not Hispanic)\n199   male              White (not Hispanic)\n200   male              White (not Hispanic)\n```\n:::\n:::\n\n\nThere are specific functions for picking columns or rows, especially useful in pipes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrawdata %>% select(PatID:Ethnicity,`sysRR (mmHg)`:HR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 6\n   PatID Sex    Ethnicity              `sysRR (mmHg)` diaRR    HR\n   <chr> <chr>  <fct>                           <dbl> <dbl> <dbl>\n 1 P 1   male   White (not Hispanic)               99    87    84\n 2 P 2   male   White (not Hispanic)              134    79    98\n 3 P 3   female White (not Hispanic)              129    68    81\n 4 P 4   female White (not Hispanic)              144    92    97\n 5 P 5   male   White (not Hispanic)              154    69    82\n 6 P 6   male   White (not Hispanic)              123    60    88\n 7 P 7   male   White (not Hispanic)              149    84    92\n 8 P 8   male   White (not Hispanic)              145    88    78\n 9 P 9   female Middle-Eastern, Arabic            118    62    93\n10 P 10  male   White (not Hispanic)              110    59    98\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% select(PatID:Ethnicity,`sysRR (mmHg)`:HR) %>% slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  PatID Sex    Ethnicity            `sysRR (mmHg)` diaRR    HR\n  <chr> <chr>  <fct>                         <dbl> <dbl> <dbl>\n1 P 1   male   White (not Hispanic)             99    87    84\n2 P 2   male   White (not Hispanic)            134    79    98\n3 P 3   female White (not Hispanic)            129    68    81\n4 P 4   female White (not Hispanic)            144    92    97\n5 P 5   male   White (not Hispanic)            154    69    82\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% select(contains('RR',ignore.case = F))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 2\n   `sysRR (mmHg)` diaRR\n            <dbl> <dbl>\n 1             99    87\n 2            134    79\n 3            129    68\n 4            144    92\n 5            154    69\n 6            123    60\n 7            149    84\n 8            145    88\n 9            118    62\n10            110    59\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% select(ends_with('r'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 2\n   diaRR    HR\n   <dbl> <dbl>\n 1    87    84\n 2    79    98\n 3    68    81\n 4    92    97\n 5    69    82\n 6    60    88\n 7    84    92\n 8    88    78\n 9    62    93\n10    59    98\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% select(-contains('name'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 7\n   PatID Sex    Ethnicity              Treatment `sysRR (mmHg)` diaRR    HR\n   <chr> <chr>  <fct>                  <chr>              <dbl> <dbl> <dbl>\n 1 P 1   male   White (not Hispanic)   Verum                 99    87    84\n 2 P 2   male   White (not Hispanic)   Verum                134    79    98\n 3 P 3   female White (not Hispanic)   Placebo              129    68    81\n 4 P 4   female White (not Hispanic)   Placebo              144    92    97\n 5 P 5   male   White (not Hispanic)   Placebo              154    69    82\n 6 P 6   male   White (not Hispanic)   Verum                123    60    88\n 7 P 7   male   White (not Hispanic)   Placebo              149    84    92\n 8 P 8   male   White (not Hispanic)   Placebo              145    88    78\n 9 P 9   female Middle-Eastern, Arabic Verum                118    62    93\n10 P 10  male   White (not Hispanic)   Verum                110    59    98\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% select(`sysRR (mmHg)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 1\n   `sysRR (mmHg)`\n            <dbl>\n 1             99\n 2            134\n 3            129\n 4            144\n 5            154\n 6            123\n 7            149\n 8            145\n 9            118\n10            110\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% select(contains('r'),-contains('rr'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 2\n   Treatment    HR\n   <chr>     <dbl>\n 1 Verum        84\n 2 Verum        98\n 3 Placebo      81\n 4 Placebo      97\n 5 Placebo      82\n 6 Verum        88\n 7 Placebo      92\n 8 Placebo      78\n 9 Verum        93\n10 Verum        98\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nrawdata %>% pull(`sysRR (mmHg)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]  99 134 129 144 154 123 149 145 118 110 139 137 135 136 148 144 136 126\n [19] 134 132 143 120 107 130 132 144 150 110 121 138 126 144 139 137 127 121\n [37] 148 125 142 129 157 154 131 160 126 139 128 138 137 141 112 145 142 116\n [55] 117 128 123 123 134 120 123 119 105 139 136 143 128 119 131 138 113 133\n [73] 141 140 129 109 136 145 132 140 128 149 155 120 137 147 141 135 137 129\n [91] 117 152 140 114 132 125 129 114 111 133 143 130 133 157 111 126 138 138\n[109] 135 152 131 123 129 122 125 126 130 155 131 126 135 124 126 129 152 145\n[127] 138 133 133 147 120 121 140 148 129 135 126 114 116 127 118 136 129 117\n[145] 141 148 128 133 131 133 131 144 129 126 121 121 118 148 118 136 128 117\n[163] 123 131 111 150 145 122 119 122 114 142 150 139 131 128 108 140 133 145\n[181] 115 145  99 132 126 133 128 114 118 110 131 113 133 132 130 143 147 138\n[199] 123 142\n```\n:::\n:::\n\n\n### List\n\nWhile\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshopping<-list(beverages=c('beer','water',\n                           'gin(not Gordons!!)','tonic'),\n               snacks=c('chips','pretzels'),\n               nonfood=c('DVDs','Akku'),\n               mengen=1:10,\n               volumen=rnorm(50,100,2))\nshopping\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$beverages\n[1] \"beer\"               \"water\"              \"gin(not Gordons!!)\"\n[4] \"tonic\"             \n\n$snacks\n[1] \"chips\"    \"pretzels\"\n\n$nonfood\n[1] \"DVDs\" \"Akku\"\n\n$mengen\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$volumen\n [1]  99.01911 102.26546  98.34278 101.51579 101.52151  98.32359 102.32438\n [8] 101.08534  97.90134 101.19480  97.65527 100.26568  99.85359 100.54450\n[15]  98.15791  98.20536  98.42395 100.43631  98.20100  99.50755  99.83395\n[22] 101.77545  97.83997 100.63909  97.03825  98.15553  98.51111 102.49644\n[29]  98.24594 101.82904 102.71481  98.13227 102.08017  99.79152 101.17492\n[36] 100.53233  99.92241  98.79890  97.43198  98.63006 101.10832  98.62621\n[43] 101.71247 100.88292  98.99049 102.91137 101.39126  98.41433  98.86586\n[50]  98.37110\n```\n:::\n\n```{.r .cell-code}\nshopping$snacks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"chips\"    \"pretzels\"\n```\n:::\n\n```{.r .cell-code}\nshopping[1]    #returns a list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$beverages\n[1] \"beer\"               \"water\"              \"gin(not Gordons!!)\"\n[4] \"tonic\"             \n```\n:::\n\n```{.r .cell-code}\nshopping[[1]]  #returns a vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"beer\"               \"water\"              \"gin(not Gordons!!)\"\n[4] \"tonic\"             \n```\n:::\n\n```{.r .cell-code}\nstr(shopping[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ beverages: chr [1:4] \"beer\" \"water\" \"gin(not Gordons!!)\" \"tonic\"\n```\n:::\n\n```{.r .cell-code}\nstr(shopping[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"beer\" \"water\" \"gin(not Gordons!!)\" \"tonic\"\n```\n:::\n\n```{.r .cell-code}\nstr(shopping$beverages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"beer\" \"water\" \"gin(not Gordons!!)\" \"tonic\"\n```\n:::\n\n```{.r .cell-code}\nshopping[1][2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$<NA>\nNULL\n```\n:::\n\n```{.r .cell-code}\nshopping[[1]][2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"water\"\n```\n:::\n\n```{.r .cell-code}\nshopping$beverages[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"water\"\n```\n:::\n\n```{.r .cell-code}\nt_out <- t.test(x = rnorm(n = 20,mean = 10,sd = 1),\n                y = rnorm(20,12,1))\nstr(t_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 10\n $ statistic  : Named num -4.55\n  ..- attr(*, \"names\")= chr \"t\"\n $ parameter  : Named num 37.6\n  ..- attr(*, \"names\")= chr \"df\"\n $ p.value    : num 5.46e-05\n $ conf.int   : num [1:2] -2.173 -0.834\n  ..- attr(*, \"conf.level\")= num 0.95\n $ estimate   : Named num [1:2] 10.3 11.8\n  ..- attr(*, \"names\")= chr [1:2] \"mean of x\" \"mean of y\"\n $ null.value : Named num 0\n  ..- attr(*, \"names\")= chr \"difference in means\"\n $ stderr     : num 0.331\n $ alternative: chr \"two.sided\"\n $ method     : chr \"Welch Two Sample t-test\"\n $ data.name  : chr \"rnorm(n = 20, mean = 10, sd = 1) and rnorm(20, 12, 1)\"\n - attr(*, \"class\")= chr \"htest\"\n```\n:::\n\n```{.r .cell-code}\nt_out$p.value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.458335e-05\n```\n:::\n\n```{.r .cell-code}\n#package rlist\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# tibble ####\ntestvars <- FindVars(varnames = c('Eth','Sex','R'))\nrawdata %>% select(testvars$index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 5\n   Sex    Ethnicity              `sysRR (mmHg)` diaRR    HR\n   <chr>  <fct>                           <dbl> <dbl> <dbl>\n 1 male   White (not Hispanic)               99    87    84\n 2 male   White (not Hispanic)              134    79    98\n 3 female White (not Hispanic)              129    68    81\n 4 female White (not Hispanic)              144    92    97\n 5 male   White (not Hispanic)              154    69    82\n 6 male   White (not Hispanic)              123    60    88\n 7 male   White (not Hispanic)              149    84    92\n 8 male   White (not Hispanic)              145    88    78\n 9 female Middle-Eastern, Arabic            118    62    93\n10 male   White (not Hispanic)              110    59    98\n# ℹ 190 more rows\n```\n:::\n\n```{.r .cell-code}\nnormvars <- FindVars(varnames = c('R'))\nfor(var_i in 3:5){\n  print(ggplot(rawdata,aes_string(x = 'Treatment',\n                                  y = testvars$bticked[var_i]))+\n          geom_boxplot())\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n```\n:::\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-22-3.png){width=672}\n:::\n\n```{.r .cell-code}\nfor(var_i in testvars$bticked[3:5]){\n  print(ggplot(rawdata,aes_string(x = 'Treatment',\n                                  y = var_i))+\n          geom_boxplot())\n}\n```\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-22-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-22-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](R101_files/figure-html/unnamed-chunk-22-6.png){width=672}\n:::\n\n```{.r .cell-code}\n# Example cruet_stand / Gewürzmenage\nn_elements <- 5*10^3\n# tibble menage with columns saltshaker, peppercaster and n_elements each\n# saltgrain and pepperflake\n# print saltshaker\n# print salt\n# print 100 saltgrain\n\n\n\n\n\n### functions ####\n#FunctionName<-function(parameters...){definition}\nmarkSign<-function(SignIn) {\n  SignIn <- as.numeric(SignIn)\n  if(is.na(SignIn)){\n    SignOut<-'wrong input, stupido!'\n  } else {\n    # if (!is.na(SignIn)) {\n    SignOut<-'n.s.'\n    if (SignIn<=0.1) {SignOut<-'+'}\n    if (SignIn<=0.05) {SignOut<-'*'}\n    if (SignIn<=0.01) {SignOut<-'**'}\n    if (SignIn<=0.001) {SignOut<-'***'}\n  }\n  return(SignOut)\n}\n\nmarkSign(SignIn=0.035)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"*\"\n```\n:::\n\n```{.r .cell-code}\nmarkSign(SignIn=\"0.35\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"n.s.\"\n```\n:::\n\n```{.r .cell-code}\nmarkSign(SignIn = 'p=3,5%')   #wrong parameter\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in markSign(SignIn = \"p=3,5%\"): NAs durch Umwandlung erzeugt\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"wrong input, stupido!\"\n```\n:::\n\n```{.r .cell-code}\nMymean<-function(werte)\n{\n  return(base::mean(werte,na.rm=T))\n}\n# source('myfunctions.R')\n### loops ####\nprint('### Game of Loops ###')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"### Game of Loops ###\"\n```\n:::\n\n```{.r .cell-code}\nfor(season_i in 1:3) {\n  cat(paste('GoL Season',season_i,'\\n'))\n  for(episode_i in 1:5) {\n    cat(paste0('   GoL S.',season_i,\n                 ' Episode ',episode_i,'\\n'))\n  }\n  cat('\\n')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGoL Season 1 \n   GoL S.1 Episode 1\n   GoL S.1 Episode 2\n   GoL S.1 Episode 3\n   GoL S.1 Episode 4\n   GoL S.1 Episode 5\n\nGoL Season 2 \n   GoL S.2 Episode 1\n   GoL S.2 Episode 2\n   GoL S.2 Episode 3\n   GoL S.2 Episode 4\n   GoL S.2 Episode 5\n\nGoL Season 3 \n   GoL S.3 Episode 1\n   GoL S.3 Episode 2\n   GoL S.3 Episode 3\n   GoL S.3 Episode 4\n   GoL S.3 Episode 5\n```\n:::\n\n```{.r .cell-code}\nfor(col_i in colnames(rawdata)){\n  print(col_i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PatID\"\n[1] \"Sex\"\n[1] \"Ethnicity\"\n[1] \"Given name\"\n[1] \"Family name\"\n[1] \"Treatment\"\n[1] \"sysRR (mmHg)\"\n[1] \"diaRR\"\n[1] \"HR\"\n```\n:::\n\n```{.r .cell-code}\nfor(col_i in shopping){\n  print(col_i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"beer\"               \"water\"              \"gin(not Gordons!!)\"\n[4] \"tonic\"             \n[1] \"chips\"    \"pretzels\"\n[1] \"DVDs\" \"Akku\"\n [1]  1  2  3  4  5  6  7  8  9 10\n [1]  99.01911 102.26546  98.34278 101.51579 101.52151  98.32359 102.32438\n [8] 101.08534  97.90134 101.19480  97.65527 100.26568  99.85359 100.54450\n[15]  98.15791  98.20536  98.42395 100.43631  98.20100  99.50755  99.83395\n[22] 101.77545  97.83997 100.63909  97.03825  98.15553  98.51111 102.49644\n[29]  98.24594 101.82904 102.71481  98.13227 102.08017  99.79152 101.17492\n[36] 100.53233  99.92241  98.79890  97.43198  98.63006 101.10832  98.62621\n[43] 101.71247 100.88292  98.99049 102.91137 101.39126  98.41433  98.86586\n[50]  98.37110\n```\n:::\n\n```{.r .cell-code}\nfor(col_i in 1:length(colnames(rawdata))){\n  print(colnames(rawdata)[col_i])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PatID\"\n[1] \"Sex\"\n[1] \"Ethnicity\"\n[1] \"Given name\"\n[1] \"Family name\"\n[1] \"Treatment\"\n[1] \"sysRR (mmHg)\"\n[1] \"diaRR\"\n[1] \"HR\"\n```\n:::\n\n```{.r .cell-code}\nfor(col_i in seq_along(colnames(rawdata))){\n  print(colnames(rawdata)[col_i])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PatID\"\n[1] \"Sex\"\n[1] \"Ethnicity\"\n[1] \"Given name\"\n[1] \"Family name\"\n[1] \"Treatment\"\n[1] \"sysRR (mmHg)\"\n[1] \"diaRR\"\n[1] \"HR\"\n```\n:::\n\n```{.r .cell-code}\nfor(col_i in seq_len(0)){\n  print(colnames(rawdata)[col_i])\n}\n\n\ntest <- 0\nwhile(test<100){\n  print(test)\n  test   <- test + 1 #test <- test+1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21\n[1] 22\n[1] 23\n[1] 24\n[1] 25\n[1] 26\n[1] 27\n[1] 28\n[1] 29\n[1] 30\n[1] 31\n[1] 32\n[1] 33\n[1] 34\n[1] 35\n[1] 36\n[1] 37\n[1] 38\n[1] 39\n[1] 40\n[1] 41\n[1] 42\n[1] 43\n[1] 44\n[1] 45\n[1] 46\n[1] 47\n[1] 48\n[1] 49\n[1] 50\n[1] 51\n[1] 52\n[1] 53\n[1] 54\n[1] 55\n[1] 56\n[1] 57\n[1] 58\n[1] 59\n[1] 60\n[1] 61\n[1] 62\n[1] 63\n[1] 64\n[1] 65\n[1] 66\n[1] 67\n[1] 68\n[1] 69\n[1] 70\n[1] 71\n[1] 72\n[1] 73\n[1] 74\n[1] 75\n[1] 76\n[1] 77\n[1] 78\n[1] 79\n[1] 80\n[1] 81\n[1] 82\n[1] 83\n[1] 84\n[1] 85\n[1] 86\n[1] 87\n[1] 88\n[1] 89\n[1] 90\n[1] 91\n[1] 92\n[1] 93\n[1] 94\n[1] 95\n[1] 96\n[1] 97\n[1] 98\n[1] 99\n```\n:::\n\n```{.r .cell-code}\n### conditions -----\nsex<-'male'\nif (sex=='male')  {\n  print('Male')\n} else {\n  print('Female')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Male\"\n```\n:::\n\n```{.r .cell-code}\nif (sex=='male')  {\n  print('Male')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Male\"\n```\n:::\n\n```{.r .cell-code}\nif (sex!='male'){\n  print('Female')\n}\n\n\n\nif (sex!='male') {\n  print('not male')\n} else {\n  print('male')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"male\"\n```\n:::\n\n```{.r .cell-code}\nif (!sex=='male') {\n  print('not male')\n} else {\n  print('male')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"male\"\n```\n:::\n\n```{.r .cell-code}\nprint(ifelse(test = sex=='male',\n             yes = 'is male',\n             no = 'is female'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"is male\"\n```\n:::\n\n```{.r .cell-code}\np <- .0012\npaste0('That is ',\n       ifelse(test = p<=.05,yes = '',no = 'not '),\n       'significant')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"That is significant\"\n```\n:::\n\n```{.r .cell-code}\ntestvar <- 3\nif(testvar %in% c(1,3,5)){\n  print('uneven')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"uneven\"\n```\n:::\n\n```{.r .cell-code}\nTRUE&FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n(1>10)&(1<5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nTRUE|FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n(1>10)|(1<5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#case_when\n\n### useful tools -----\n?any\n?'%in%'\n2%in%1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n2%in%c(1,3,4,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n",
    "supporting": [
      "R101_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}