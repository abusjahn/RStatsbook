# Descriptive statistics

Descriptive statistics are used to summarize and organize data in a manner that is meaningful and useful. They provide simple summaries about the sample and the measures, such as mean, median, standard deviation, or frequencies. Furthermore, they allow for the presentation of quantitative descriptions in a manageable form, aiding in understanding the data distribution and central tendency. For group comparisons, they will inform about direction and magnitude of differences.

## Reading in data

```{r}
pacman::p_load(conflicted,tidyverse,wrappedtools,
               flextable, here)
set_flextable_defaults(font.size = 9, 
                       padding.bottom = 1, 
                       padding.top = 3,
                       padding.left = 3,
                       padding.right = 4
)
load(here("data/bookdata1.RData"))
```

## Graphical exploration should start before descriptive statistics

```{r}
ggplot(rawdata,aes(`sysBP V0`, `diaBP V0`))+
  geom_point()+
  geom_smooth(se=F)+
  geom_smooth(method="lm",color="red", 
              fill="gold", alpha=.15) 
```

## Gaussian variables

### Simple function calls

```{r}
(mean_size <- mean(rawdata$`Size (cm)`))
(sd_size <- sd(rawdata$`Size (cm)`))
min(rawdata$`Size (cm)`)
SEM(rawdata$`Size (cm)`)
```

### Combined reporting

For publishable tables you should round the numbers to a reasonable number of digits. Function `roundR()` is more flexible than base `round()`, as it determines the number of digits necessary to obtain the desired precision. The `level` argument allows for rounding to a specific number of non-zero digits. The `.german` argument changes the decimal point to a comma.

```{r}
round(mean_size,digits = 2)
roundR(mean_size,level = 2)
```

Usually mean and sd are reported together, function `meansd()` computes, rounds, and pastes the statistics in one go, arguments allow for flexible reporting:

```{r}
meansd(rawdata$`Size (cm)`, roundDig = 4,
       range = TRUE,add_n = TRUE)
meansd(rawdata$`sysBP V0`, roundDig = 4,
       range = TRUE,
       add_n = TRUE,.german = TRUE)
meanse(rawdata$`Size (cm)`, roundDig = 4)
```

\newpage

## Ordinal variables

```{r}
median(rawdata$`Size (cm)`)
quantile(rawdata$`Size (cm)`,probs = c(.25,.75))
median_quart(rawdata$`Size (cm)`)
median_quart(rawdata$Age,range = T)
```

Median and quartiles are sometimes the better choice even when assuming a Normal distribution, if there are outliers.

![](../Graphs/MeanMedian.jpg){fig-align="center"}

\newpage

## Categorical variables

```{r}
table(rawdata$Sex, useNA = "a")
sex_count <- table(rawdata$Sex, useNA = "ifany")
table(rawdata$`NYHA V2`,useNA = "always")
table(rawdata$`NYHA V2`,useNA = "i")
table(rawdata$`NYHA V2`,useNA = "no")
randomize <- table(rawdata$Sex, rawdata$Testmedication)

prop.table(sex_count)
prop.table(randomize,margin = 2)*100

cat_desc_stats(rawdata$`NYHA V2`) 
cat_desc_stats(rawdata$Sex, singleline = TRUE)

rawdata |> 
  mutate(Testmedication=factor(Testmedication,
                               levels=0:1,
                               labels=c("Placebo",
                                        "Verum"))) |>
  cat_desc_table(
               desc_vars = factvars$names) |> 
  rename(`n (%)`=desc_all) |> 
  flextable() |> 
  align(i = ~`n (%)`!=" ",j = 1,align = "right") |> 
  width(j = c(1,2),width = c(3,4),unit = "cm") |> 
  bg(~`n (%)`==" ", bg='lightgrey')
# cat("&nbsp;\n\n")
```

## Summarize data

When creating tables with descriptive statistics, you usually report on more than just 1 variable in more than just 1 subgroup, and there may be more than 1 statistics to report. `Summarize()`, often in combination with `across()`, makes that task easier, usually in a pipeline:

```{r}
# we pipe the data
rawdata |> 
  # into the summarize function
  summarize(across(all_of(gaussvars$names), #which variables to analyse?
                   .fns=list( #which functions to apply?
                     # ~ changes a function into a template
                     n=~n(),
                     # .x is the placeholder for the actual values
                     Mean=~mean(.x,na.rm=TRUE) |> 
                       roundR(textout = F),
                     Median=~median(.x,na.rm=TRUE) |> 
                       roundR(textout = F),
                     SD=~sd(.x,na.rm=TRUE) |> 
                       roundR(textout = F)))) |> 
  # the wide table with n vars * n functions columns is reshaped
  pivot_longer(
    everything(), # transform all columns into long form
    names_to=c("Variable",".value"), # .value is extracting names for values
               names_sep="_") |> 
  # pipe into formatted table
  flextable() |> 
  set_table_properties(width=1, layout="autofit") 
```


```{r}
rawdata |> 
  group_by(Testmedication,Sex) |> 
  summarise(WeightSummary=meansd(`Weight (kg)`,add_n = TRUE),
            .groups="keep") |> 
  flextable()
# # cat("<br\n\n")

rawdata |> 
  group_by(Sex) |> 
  summarize(across(gaussvars$names,
                   .fns=~meansd(.x,range=T))) |> 
  pivot_longer(cols=-Sex,
               names_to="Measure") |> 
  pivot_wider(names_from=Sex) |> 
  flextable()
# # cat("<br\n\n")
rawdata |> 
  group_by(Sex) |> 
  summarize(across(gaussvars$names,
                   .fns=list(
                     n=~n(),
                     Mean=~mean(.x,na.rm=TRUE) |> 
                       roundR(textout = F),
                     Median=~median(.x,na.rm=TRUE) |> 
                       roundR(textout = F),
                     SD=~sd(.x,na.rm=TRUE) |> 
                       roundR(textout = F)))) |> 
  pivot_longer(cols=-Sex,
               names_to=c("Variable","stat"),
               names_sep="_")|> 
  pivot_wider(names_from=c(stat,Sex),
              # names_sep=" ",
              names_glue="{stat} ({Sex})",
              values_from=value) |> 
  select(-starts_with("n")) |>
  flextable() |> 
  set_table_properties(width=1, layout="autofit") 

# # cat("<br\n\n")

compare2numvars(data = rawdata,
                dep_vars = c( "Size (cm)","Weight (kg)",
                              "sysBP V0","diaBP V0"),
                indep_var = "Sex",
                gaussian = TRUE) |> 
  flextable() |> 
  set_table_properties(width=1, layout="autofit")
# cat("<br\n\n")
```
