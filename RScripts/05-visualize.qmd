# Visualize data with ggplot

While there are various packages providing visualizations, here we are focusing on ggplot2 (grammar of graphics) as a very flexible and versatile approach with many extensions implemented in additional packages. See e.g. [https://exts.ggplot2.tidyverse.org/](https://exts.ggplot2.tidyverse.org/){target="_blank"}.

```{r}
pacman::p_load(conflicted, tidyverse,here,
               grid,gridExtra,car,
               ggsci,ggsignif, ggthemes, ggridges,
               # gganimate,
               ggforce,
               ggbeeswarm,
               wrappedtools,
               emojifont,
               patchwork)
conflicts_prefer(dplyr::filter) # solves name conflict 
```

```{r}
#| include: false
#| eval: false
theme_set(theme_grey(base_size = 20))
```

## Example data

The typical examples use either diamonds from `ggplot2` or mtcars from `datasets`. There are help files for both.

```{r}
head(diamonds)
head(mtcars)
```

## Basic structure of a ggplot call

To create a figure, we at least use 2 function calls:

1.  ggplot(data = my_data, mapping = aes(x=..., y=..., color=..., shape=... )) to define data and inside aes() some global defaults for aesthetic mappings, this (sort of) creates the canvas to draw on

2.  geom_xxx() to define the geometry to be used to show the data, e.g. bar, boxplot, point

When mapping data to aesthetics, the class of data matters: Numerical data are interpreted as continuous, so a color heatmap is mapped rather than discrete colors, grouping of data requires factors / characters.

Minimal example:

```{r}
ggplot(data=diamonds,mapping = aes(x=clarity))+
  geom_bar()
```

geom_bar() inherits the global aestetic x (*build a x-axis based on values in column clarity*) and does not need a y-axis definition, as it uses some in-build statistics ("count") and defines y.

We can add additional aesthetic parameters like fill-color. This automatically creates sub-groups for counting:

```{r}
ggplot(data=diamonds,aes(x=clarity,fill=cut))+
  geom_bar()
```

This graph represents this count table:

```{r}
diamonds |>
  group_by(clarity,cut) |> 
  count() |> 
  pivot_wider(names_from = clarity,values_from=n)
```

Aesthetic parameters can represent data / have some meaning (as cut quality), but they can be defined to reflect your taste rather than data. In that case, you define them outside of `aes()`. Careful, as this may lead to confusion:

```{r}
#aesthetics outside aes
ggplot(data=diamonds,aes(x=clarity))+
  geom_bar(fill="gold")

ggplot(data=diamonds,aes(x=clarity))+
  geom_bar(aes(fill="gold")) #should be outside aes!

ggplot(data=diamonds,aes(x=clarity))+
  geom_bar(aes(fill=cut)) # may be defined locally as well globally
```

## fill vs. color

Some elements (as e.g. the bar or boxplot) know 2 color elements:

-   inner color, defined by `fill`

-   outer frame color, defined by `color`

Other elements (as e.g. the line) only have a single color definition, specified by color. And for some elements (as e.g. dots), it depends. See help for points for examples.

```{r}
ggplot(data=diamonds,aes(x=clarity,color=cut))+
  geom_bar()
ggplot(data=mtcars,aes(factor(cyl),fill=factor(cyl)))+
  geom_bar(color="black")
ggplot(data=mtcars,aes(factor(cyl),color=factor(cyl)))+
  geom_bar()
```

## Color systems

ggplot2 comes with various color definitions, many external packages extend that. Manual definition of colors is possible as well. Redefining the mapping between data and aesthetics can be done with scale\_... functions

For the demonstration, I store a plot into a variable, this includes all data and plot definitions, nothing like jpg!

```{r}
(plottemp <- ggplot(data=diamonds,aes(x=clarity,fill=cut))+
    geom_bar())
plottemp + scale_fill_brewer(palette="Set2") #in-built "scale" for fill
plottemp + scale_fill_grey(name = "cut of diamonds")
plottemp + scale_fill_grey(name = "cut of\ndiamonds") +
  scale_y_continuous(expand = expansion(mult = c(0,.5)))+ # rescaling y
  theme_bw(base_size = 20)+
  theme(panel.grid.major.x = element_blank())
my_colors <- c("gold",'blue','violet',"#FF012F","#01AABC")
plottemp+ scale_fill_manual(values=my_colors)
```

### External color definitions from ggsci

```{r}
plottemp+scale_fill_lancet()
plottemp+scale_fill_jama()
plottemp+scale_fill_npg()
(printplot <- plottemp+scale_fill_startrek())
```

## Exporting ggplots

There are two distinct ways, using ggsave() or more generally creating an external graphic device with e.g. png() / tiff() / pdf():

```{r}
#| eval: false
ggsave(filename = here("Graphs/ggtestplot.png"),
       plot = printplot,
       width=20,height=20,
       units="cm",dpi=150)
ggsave(filename = here("Graphs/ggtestplot.tiff"),
       plot = printplot,
       width=20,height=20,
       units="cm",dpi=600)
ggsave(filename = here("Graphs/ggtestplot_c.tiff"),
       plot = printplot,
       width=20,height=20, compression="lzw",
       units="cm",dpi=600)
# alternative:
png(filename = here("Graphs/ggtestplot2.png"),
    width = 20,height = 20,units = "cm",res = 150)
plottemp
dev.off()
```

## Other geoms

Common forms of plots are barplots, boxplots, scatterplots (possibly with regression line), and density-plots. For plotting dots for groups, there are various options to avoid over-plotting of repeated data, with the beeswarm as my preference.

```{r}
ggplot(data=mtcars,aes(x = wt,y = mpg))+
  geom_point()
ggplot(data=mtcars,aes(x = wt,y = mpg))+
  geom_point()+
  geom_smooth()
ggplot(data=mtcars,aes(x = wt,y = mpg))+
  geom_point()+
  geom_smooth(method="lm")

ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot() #default 1.5 IQR
ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot(coef=3) # this extends range of expected values
ggplot(mtcars,aes(x = factor(gear),y = wt,
                  fill=factor(cyl)))+
  geom_boxplot(coef=3) # group by cyl, as it is mapped to fill

ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot(coef=3)+
  geom_point(size=2) # may contain overlapping points
ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot(coef=3)+
  geom_point(position = position_jitter(width = .1))
ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot(coef=3)+
  geom_dotplot(alpha=.7, # group similar(ish) data on a line
               binaxis = "y",stackdir = "center",
               stackratio = .9,dotsize = .6)  
ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot(coef=3)+
  ggbeeswarm::geom_beeswarm(cex = 2,size=3,alpha=.25)
ggplot(mtcars,aes(x = factor(gear),y = wt))+
  geom_boxplot(outlier.alpha = 0)+ # to avoid plotting outliers twice
  geom_beeswarm(cex = 2,size=3,alpha=.25)

#density plot
ggplot(diamonds,aes(price))+
  geom_density()
ggplot(mtcars,aes(mpg, fill=factor(am)))+
  geom_density(alpha=.3)
ggplot(diamonds,aes(price,y=clarity))+
  geom_density_ridges()

```

## Combining and finetuning aesthetics

```{r}
ggplot(data=mtcars,aes(wt, mpg,color=qsec))+
  geom_point(size=4) #outside aes!
ggplot(data=mtcars,aes(wt, mpg,color=qsec, size=carb))+
  geom_point()
ggplot(data=mtcars,aes(wt, mpg,color=qsec, size=carb))+
  scale_color_gradient(low="darkred",high="blue")+
  geom_point()
ggplot(data=mtcars,aes(wt, mpg,color=qsec, size=carb))+
  scale_color_gradient2(low="red",high="darkblue",
                        mid="white",
                        limits=c(13,23),midpoint=18)+
  geom_point()+
  scale_x_continuous(breaks = seq(-10^3,10^3,),
                     minor_breaks=seq(-10^3,10^3,1),
                     limits = c(0,10))+
  scale_y_log10(
    breaks=seq(0,100,5),
    minor_breaks=seq(0,100,1))


ggplot(data=mtcars,aes(wt, log10(mpg),color=qsec, size=carb))+
  scale_color_gradient2(low="red",high="darkblue",
                        mid="white",
                        limits=c(13,23),midpoint=18)+
  geom_point()+
  scale_x_continuous(breaks = seq(0,100,5),
                     minor_breaks=seq(0,100,1),
                     limits = c(0,10))#+
  # scale_y_log10(minor_breaks=seq(0,100,1))




ggplot(diamonds,aes(carat,price,color=clarity))+
  geom_point()
ggplot(diamonds,aes(carat,price,color=clarity))+
  geom_point()+
  scale_x_log10()+
  scale_y_log10()
ggplot(diamonds,aes(carat,price,color=clarity))+
  geom_point()+
  scale_x_log10(
    breaks=logrange_15,
    minor_breaks=logrange_123456789)+
  scale_y_log10(
    breaks=logrange_12357,
    minor_breaks=logrange_123456789)
# use different aesthetic mappings
ggplot(data=mtcars,
       aes(wt, mpg,size=qsec, shape=factor(cyl)))+
  geom_point()

ggplot(data=mtcars,aes(wt, mpg, size=qsec))+
  geom_text(family="EmojiOne",label="\U1F697")+
  scale_size_continuous(range = c(5,10))

```

## Positioning elements

The position arguments allows stacking, dodging, jittering and exact positioning of elements. Positioning is an essential part of storytelling, the same data can be presented with different focus.

```{r}
p<-ggplot(data=diamonds,aes(clarity,fill=cut))
p+geom_bar(position="stack") # default for bar
p+geom_bar(position="dodge")
p+geom_bar(position=position_dodge(width = 0.7), alpha=.75)
p+geom_bar(position="fill") #y-axis labeling needs tuning
p+geom_bar(position="fill")+
  scale_y_continuous(name = "Frequency (%)",
                     breaks=seq(0,1,.2), #steps
                     labels=seq(0,100,20))
p+geom_bar(position="fill")+
  scale_y_continuous("Frequency",
                     breaks=seq(0,1,.2),
                     labels=scales::percent,
                     expand=expansion(mult = c(0,0)))+
  theme(axis.title.y = element_text(angle = 0,
                                    vjust = .5))+
  geom_hline(yintercept = .5, linetype=2) # e.g. for reference lines
p+geom_bar(position="identity") # bad idea!
p+geom_bar(position="identity",alpha=.5) # even worse!!
ggplot(data=diamonds,aes(clarity,color=cut, group=cut))+
  geom_freqpoly(stat="count",position="identity",lwd=1.5)+
  geom_point(stat="count",size=5)+
  scale_color_manual(values = c("green","lightblue",
                                "darkblue",
                                rgb(253,79,54,
                                    maxColorValue = 255),
                                "#00798d"))
```

## Order of layers

When combining various geoms, the order is important, as elements are not transparent by default.

```{r}
ggplot(data=mtcars,aes(wt, mpg))+
  geom_point(size=4)+
  geom_smooth(linewidth=3)+ # line overlaps points
  geom_smooth(data=mtcars |> filter(wt>3), #picks a sub-sample
              method="lm",linewidth=3, color="red")


ggplot(data=mtcars,aes(wt, mpg))+
  geom_smooth(linewidth=3)+
  geom_point(size=4)
ggplot(data=mtcars,aes(wt, mpg))+
  geom_smooth(linewidth=3,color="red")+
  geom_smooth(method="lm",linewidth=3)+
  geom_point(size=4)
ggplot(data=mtcars,aes(wt, mpg,
                       color=factor(cyl)))+
  geom_point(size=4)+
  geom_smooth(method="lm",linewidth=1)
ggplot(data=mtcars,aes(wt, mpg,
                       color=factor(cyl),
                       shape=factor(am)))+
  geom_point(size=2)+
  geom_smooth(method="lm",linewidth=1,se=FALSE)

```

## Local aesthetics for layers

```{r}
#? lm for all?
ggplot(data=mtcars,aes(wt, mpg))+
  geom_smooth(size=1,color="black",fill="yellow")+
  geom_point(size=3,aes(color=factor(cyl),shape=factor(am))) #aes for geom only
ggplot(data=mtcars,aes(wt, mpg,color=factor(cyl)))+
  geom_smooth(size=1,color="black",fill="yellow")+ # global color overwritten
  geom_point(size=3, aes(shape=factor(am))) 
```

## Faceting (splitting) plots

Visualizing many groups can lead to confusing / too-busy plots, splitting is often an alternative. Visualizing many variables at the same time can be achieved with facets as well (after pivot_longer).

### facet_grid

Grids are specified by defining variables for rows and/or columns, empty combinations still are shown.

Labeling of facets often requires name and content to be informative.

Margins (taking all elements together) can be shown for rows and/or columns.

```{r}
#| warning: false
(plot_tmp <- ggplot(mtcars, aes(wt, mpg)) +
    geom_point())
plot_tmp + facet_grid(rows = vars(gear),
                   cols = vars(cyl))
cat("facet labeling improved:\n")
plot_tmp + facet_grid(rows = vars(gear),
                   cols = vars(cyl),
                   labeller=label_both,margins="gear")
# options(warn=-1) 
plot_tmp + geom_smooth(method="lm")+
  facet_grid(rows = vars(gear),
             cols = vars(cyl), 
             labeller=label_both, margins=TRUE)
# options(warn=0)

```

### facet_wrap

When showing many facets, wrapping around after some is useful, less systematic than grid.

```{r}
plot_tmp + facet_wrap(facets = vars(cyl))
plot_tmp + facet_wrap(facets = vars(cyl), ncol=2)

# empty combination is dropped
plot_tmp + facet_wrap(facets=vars(cyl,gear),labeller=label_both) 

#combining variables
mtcars |> 
  pivot_longer(cols = c(wt, mpg, hp, disp, qsec)) |> #view()
  ggplot(aes(x=factor(am), y=value))+
  geom_beeswarm(alpha=.5, cex=2)+
  facet_wrap(facets = vars(name), scales="free")

```

### Controlling scales in facets (default: scales="fixed")

```{r}
plot_tmp + facet_grid(rows=vars(gear),cols=vars(cyl), 
                   labeller=label_both, scales="fixed")
plot_tmp + facet_grid(rows=vars(gear),cols=vars(cyl), 
                   labeller=label_both, scales="free")
plot_tmp + facet_grid(rows=vars(gear),cols=vars(cyl), 
                   labeller=label_both, scales="free_x")
plot_tmp + facet_grid(rows=vars(gear),cols=vars(cyl), 
                   labeller=label_both, scales="free_y")
```

## Showing summaries

While plotting underlying rawdata is pretty informative, adding summary statistics guides the viewer. Error bars help to evaluate differences visible, but need to be labelled!!

Functions for summary statistics (mean_se, mean_cl_normal, mean_cl_boot etc.) are build on top of Hmisc functions. So this package is needed but not automatically installed with ggplot2.

```{r}
(plottemp <- ggplot(mtcars,aes(factor(gear),mpg))+
   geom_beeswarm(alpha=.5))
plottemp+stat_summary(color="red")
plottemp+stat_summary(fun.data="mean_se",
                      color="red")
plottemp+stat_summary(fun.data="mean_sdl",
                      fun.args=list(mult=1),
                      color="red")+
  ylab("mpg (mean \u00b1 SD)")

 ggplot(mtcars,aes(factor(gear),mpg))+
   stat_summary(geom = "point", shape="-",
                size=50, 
                fun = "mean",color="red")+
   geom_beeswarm(alpha=.5)
   

means <- mtcars |> 
  group_by(gear) |> 
  summarise(mean=round(mean(mpg),3),sd=sd(mpg))
plottemp+stat_summary(fun.data="mean_cl_boot",
                      fun.args=list(B=10^4),
                      color="red")+
  geom_label(data=means,
             aes(factor(gear),mean,label=mean),
             hjust=1.2)+
  ylab("mpg (mean \u00b1 95% CI)")+
  xlab("Gear")
plottemp+stat_summary(fun.data="mean_cl_normal",color="red")+
  ylab("mpg (mean \u00b1 95% CI)")+
  xlab("Gear")
plottemp+stat_summary(fun.data="median_hilow",color="red")+
  ylab("mpg median \u00b1 95%")
# geom_pointrange()
plottemp+stat_summary(fun.data="median_cl_boot_gg",color="red")+
  ylab("mpg (median \u00b1 95% CI)")+
  xlab("Gear")

```

## Indicating significances

Package ggsign makes it easier to add significance brackets (no more photoshopping), it either computes p-values or takes them from your testing (and this is what you should always be doing!).

```{r}
# ggsign ####
p <- round(
  wilcox.test(mtcars$mpg~mtcars$am)$p.value,
  5)
(plottemp <- ggplot(mtcars,aes(as.factor(am),mpg))+
    geom_boxplot())
plottemp+geom_signif(
  comparisons=list(c(1,2)),
  # aes(y=0),
 textsize = rel(10), vjust = .0,
  #y_position=max(mtcars$mpg+3),
  # annotations=paste0("p = ", p),
  annotations=markSign(p),
  # annotations=p,
  tip_length=.02)+
  scale_y_continuous(expand = expansion(mult=c(0.05,.1)))

plottemp + geom_signif(
  comparisons=list(1:2))+
  scale_y_continuous(expand = expansion(mult=c(0.05,.2)))

ggplot(diamonds,aes(clarity, price))+
  stat_summary(fun.data=mean_sdl)+
  geom_signif(comparisons=list(c(1,2),c(1,3),c(1,4),c(1,5),
                               c(1,6),c(1,7),c(1,8)),
              step_increase = 0.15)+
  ggtitle("nominal p-values!!")
ggplot(diamonds,aes(clarity, price))+
  stat_summary(fun.data=mean_sdl)+
  geom_signif(comparisons=list(c(1,2),c(2,3),c(3,4),c(4,5),
                               c(5,6),c(6,7),c(7,8)),
              step_increase = 0.15)+
  ggtitle("nominal p-values!!")

ggplot(diamonds,aes(clarity, price))+
  stat_summary(fun.data=mean_sdl)+
  geom_signif(comparisons=list(c(1,2),c(2,3),c(3,4),c(4,5),
                               c(5,6),c(6,7),c(7,8)),
              map_signif_level = TRUE,
              extend_line = -.005)+
  ggtitle("nominal p-values!!")+
  scale_y_continuous(expand = expansion(mult=c(0.05,.1)))

```

## Theme definitions / changes

Themes define everything not-data-related in your figures, like margins, fonts, background color etc. There are many predefined themes, and all can be customized. You can change a theme for all plots to come (theme_update()) or just a single plot ( +theme())

```{r}
old <- theme_set(theme_wsj())
ggplot(data=diamonds,aes(x=clarity,fill=cut))+
  geom_bar()
theme_update(legend.position="bottom",
             axis.text=element_text(colour = "darkblue",
                                    size=12),
             axis.text.x=element_text(vjust=0.5,angle=45,
                                      family="sans",
                                      face = "bold"),
             axis.title=element_text(size=25,
                                     color="darkred"),
             plot.margin=unit(c(3,4,.5,.3),"lines"),    #N,E,S,W
             axis.title.y=element_text(vjust=0.4,angle=45,
                                       face="bold"),
             legend.key.size=unit(2.5, "lines"),
             panel.background=element_rect(fill="darkgrey"),
             panel.grid.minor = element_line(colour="white"),
             panel.grid.major = element_line(
               linetype=1,
               color="violet",linewidth = 2),
             legend.text = element_text(size = 18),
             legend.title=element_text(size=30, color="pink"))
ggplot(data=diamonds,aes(x=clarity,fill=cut))+
  geom_bar()
theme_set(theme_grey())
#theme_set(old)
ggplot(data=diamonds,aes(x=clarity,fill=cut))+
  geom_bar()

# ggthemes ####
plottemp+theme_economist()
plottemp+theme_excel()+
  theme(axis.title.x =  element_text(face="bold", hjust=0.95))
plottemp+theme_minimal()
plottemp+theme_void()
plottemp+theme_base()
plottemp+theme_bw()+
  theme(panel.grid.major.x = element_blank())

# https://www.data-imaginist.com/2019/a-flurry-of-facets/

# https://github.com/thomasp85/gganimate

```

## Combining figures with patchwork

More details on [github](https://github.com/thomasp85/patchwork){target="_blank"}

```{r}
p1 <- ggplot(mtcars) + 
  geom_point(aes(disp, mpg, color=factor(am)))
p2 <- ggplot(mtcars) + 
  geom_point(aes(wt, mpg, color=factor(am))) 
p1 | p2
(p1 / p2) +
  plot_layout(guides = "collect")
  
p3 <- ggplot(mtcars) + 
  geom_smooth(aes(disp, qsec, color=factor(am)))
# p4 <- ggplot(mtcars) + 
#   geom_bar(aes(factor(carb), fill=factor(am)))

(p1 | p2) / 
  (p3  + guides(color = "none")) +
  plot_annotation(tag_levels = "A") +
  plot_layout(guides = "collect")
  
```

[more facets...](https://www.data-imaginist.com/2019/a-flurry-of-facets/)

[animations...](https://github.com/thomasp85/gganimate)

```{r}
GGally::ggpairs(mtcars)
```
